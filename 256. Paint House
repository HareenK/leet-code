256. Paint House
Medium

There is a row of n houses, where each house can be painted one of three colors: red, blue, or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by a n x 3 cost matrix. For example, costs[0][0] is the cost of painting house 0 with the color red; costs[1][2] is the cost of painting house 1 with color green, and so on... Find the minimum cost to paint all houses.

 

Example 1:

Input: costs = [[17,2,17],[16,16,5],[14,3,19]]
Output: 10
Explanation: Paint house 0 into blue, paint house 1 into green, paint house 2 into blue.
Minimum cost: 2 + 5 + 3 = 10.

Example 2:

Input: costs = []
Output: 0

Example 3:

Input: costs = [[7,6,2]]
Output: 2

class Solution {
public:
    int minCost(vector<vector<int>>& costs) {
        // Consider a 3xn matrix and then compute the best cost of 
        // painting a house with a specific color. 
        
        int size = costs.size();
        
        if (!size)
            return 0;
        
        int colors = costs[0].size();
        
        vector<vector<int>> dp (size, vector<int> (colors, 0));
        
        for (int r = 0; r < size; r++) {
            if (r == 0) {
                for (int c = 0; c < colors; c++) {
                    dp[r][c] = costs[r][c];
                }
            } else {
                for (int c = 0; c < colors; c++) {
                    dp[r][c] = min (dp[r-1][(c+1)%colors], dp[r-1][(c+2)%colors]) + costs[r][c];
                    // Wow we get a beautiful line too ... 
                }
            }
        }
        
        return min ({dp[size-1][0], dp[size-1][1], dp[size-1][2]});
        
    }
};
