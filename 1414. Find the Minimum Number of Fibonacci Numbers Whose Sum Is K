1414. Find the Minimum Number of Fibonacci Numbers Whose Sum Is K
Medium

Given the number k, return the minimum number of Fibonacci numbers whose sum is equal to k, whether a Fibonacci number could be used multiple times.

The Fibonacci numbers are defined as:

    F1 = 1
    F2 = 1
    Fn = Fn-1 + Fn-2 , for n > 2.

It is guaranteed that for the given constraints we can always find such fibonacci numbers that sum k.

 

Example 1:

Input: k = 7
Output: 2 
Explanation: The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ... 
For k = 7 we can use 2 + 5 = 7.

Example 2:

Input: k = 10
Output: 2 
Explanation: For k = 10 we can use 2 + 8 = 10.

Example 3:

Input: k = 19
Output: 3 
Explanation: For k = 19 we can use 1 + 5 + 13 = 19.

 

Constraints:

    1 <= k <= 10^9


class Solution {
public:
    int findMinFibonacciNumbers(int k) {
        // 19 - 1 1 2 3 5 8 13 21  34 
        //       0 1 1 2 3 5  8  13
         
        // Have to use dp -- ?? How to 
        
        vector<int> dp;
 
        // emplace 0 entry in the dp vector.
        
        int fib1 = 1;
        int fib2 = 1;
        
        while (fib2 < k) {
            dp.emplace_back(fib2);
            //cout << "fib1 : " << fib1 << " fib2 : " << fib2 << endl;
            int temp = fib1 + fib2;
            fib1 = fib2;
            fib2 = temp;
        }
        
        if (fib2 == k) return 1;
        
        // for (auto num : dp) {
        //     cout<< num << " ";
        // }
        
        int count = 1;
        int residue = k - fib1;
        
        while (residue != 0) {
            // cout << "residue : " << residue << endl;
            for (int i = 0 ; i < dp.size(); i++) {
                if (dp[i] > residue) {
                    count++;
                    residue = residue - dp[i-1];            
                    break;
                } else if (dp[i] == residue) {
                    count++;
                    residue = residue - dp[i];
                    break;
                }
            }    
        }
    
        return count;
    }        
};
