1052. Grumpy Bookstore Owner
Medium

Today, the bookstore owner has a store open for customers.length minutes.  Every minute, some number of customers (customers[i]) enter the store, and all those customers leave after the end of that minute.

On some minutes, the bookstore owner is grumpy.  If the bookstore owner is grumpy on the i-th minute, grumpy[i] = 1, otherwise grumpy[i] = 0.  When the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise they are satisfied.

The bookstore owner knows a secret technique to keep themselves not grumpy for X minutes straight, but can only use it once.

Return the maximum number of customers that can be satisfied throughout the day.

 

Example 1:

Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3
Output: 16
Explanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. 
The maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.

 

Note:

    1 <= X <= customers.length == grumpy.length <= 20000
    0 <= customers[i] <= 1000
    0 <= grumpy[i] <= 1

class Solution {
public:
    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {
        
        // Not grumpy -- 
        // Get the total non-grumpy count first. 
        
        int size = customers.size();
        
        int result = 0;
        
        for (int i = 0; i < size; i++) {
            if (grumpy[i] == 0) {
                result += customers[i];
            }
        }
        
        int window = 0;
        
        for (int i = 0; i < X; i++) {
            if (grumpy[i] == 1) {
                window += customers[i];
            }
        }
        
        int maxL = window;
        
        for (int i  = 0; i < size-X; i++) {
             window = window - (grumpy[i] == 1 ? customers[i] : 0) + 
                               (grumpy[i+X] == 1 ? customers[i+X] : 0);
             maxL = max (maxL, window);
        }
        
        return result + maxL;
    }
};

// class Solution {
// public:
//     int maxSatisfied(vector<int>& c, vector<int>& g, int x) {
//         int n = c.size(), mx = INT_MIN, w = 0, sum = 0;
//         for(int i=0; i<n; i++)
//             sum+=!g[i]?c[i]:0;
//         for(int i=0; i<x; i++)
//             w+=g[i]?c[i]:0;
//         mx = w;
//         for(int i=x; i<n; i++)
//             w=w-(g[i-x]?c[i-x]:0)+(g[i]?c[i]:0), mx = max(mx,w);
//         return sum + mx;
//     }
// };
