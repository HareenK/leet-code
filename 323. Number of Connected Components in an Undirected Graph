323. Number of Connected Components in an Undirected Graph
Medium

Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to find the number of connected components in an undirected graph.

Example 1:

Input: n = 5 and edges = [[0, 1], [1, 2], [3, 4]]

     0          3
     |          |
     1 --- 2    4 

Output: 2

Example 2:

Input: n = 5 and edges = [[0, 1], [1, 2], [2, 3], [3, 4]]

     0           4
     |           |
     1 --- 2 --- 3

Output:  1

Note:
You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.


class Solution {   
public:
    vector<int> visited;
    vector<vector<int>> graphG;
    
    void dfs (int i) {
        visited[i] = 1;
        for (int next : graphG[i]) {
            if (visited[next] == 0)
                dfs(next);
        }
        return;
    }
    
    int countComponents(int n, vector<vector<int>>& edges) {
        // Walk over the graph edges and keep a visited node context,
        // and return count.
        
        visited = vector<int> (n, 0);
        
        vector<vector<int>> graph (n, vector<int>(0,0));
        
        for (auto & edge : edges) {
            graph[edge[0]].emplace_back(edge[1]);
            graph[edge[1]].emplace_back(edge[0]);
        }
        
        graphG = graph;
        
        int count  = 0;
        
        for (int i = 0; i < n; i++) {
            if (visited[i] == 0) {
                dfs (i);
                count++;
            }
            
        }
        
        return count;
    }
};

class Solution {
private:
    class DisjointSetUnion {
    private:
        vector<int> parents;
        
    public:
        DisjointSetUnion(int size) : parents(size) {
            iota(parents.begin(), parents.end(), 0);
        }
        
        int findSet(int value) {
            if (parents[value] == value) {
                return value;
            } else {
                return parents[value] = findSet(parents[value]);
            }
        }
        
        void makeUnion(int first, int second) {
            int set1 = findSet(first);
            int set2 = findSet(second);
            parents[set1] = parents[set2];
        }
    };

    public:
    int countComponents(int n, vector<vector<int>>& edges) {
        DisjointSetUnion disjointSet(n);
        
        for (const vector<int>& edge : edges) {
            disjointSet.makeUnion(edge[0], edge[1]);
        }
        
        set<int> uniqueSets;
        
        for (int i = 0; i < n; ++i) {
            uniqueSets.insert(disjointSet.findSet(i));
        }
        
        return uniqueSets.size();
    }
};

// class Solution {
//     private: 
//     class unionFind {
//         public: 
//         int numComponents;
//         vector<int> parent;
//         vector<int> size;
        
//         unionFind (int n) {
//             numComponents = n;
//             parent = vector<int> (n,0);
//             iota (parent.begin(), parent.end(), 0);
//             size = vector<int> (n, 1);
//         }
        
//         int findParent (int n) {
//             int root = parent[n];
//             while (root != parent[root]) {
//                 root = parent[root];
//             }
            
//             // compress the path
//             while (n != root) {
//                 int next = parent[n];
//                 parent[n] = root;
//                 next = n;
//             }
            
//             return root;
//         }
        
//         void merge (int a, int b) {
//             int aRoot = findParent (a);
//             int bRoot = findParent (b);
            
//             if (aRoot == bRoot) {
//                 return;
//             }
            
//             if (size[aRoot] < size[bRoot]) {
//                 parent[aRoot] = parent[bRoot];
//                 size[bRoot] += size[aRoot];
//             } else {
//                 parent[bRoot] = parent[aRoot];
//                 size[aRoot] += size[bRoot]; 
//             }
            
//             numComponents--;
            
//             return; 
//         }
        
//     };
//     public: 
//     int countComponents (int n, vector<vector<int>> & edges) {
        
//         if (!edges.size())
//             return 0; 
        
//         unionFind uf (n);
        
//         for (auto & edge : edges) {
//             uf.merge (edge[0], edge[1]);
//         }
    
//         return uf.numComponents; 
//     }
// };
