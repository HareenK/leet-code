142. Linked List Cycle II
Medium

Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.

Note: Do not modify the linked list.

 

Example 1:

Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.

Example 2:

Input: head = [1,2], pos = 0
Output: tail connects to node index 0
Explanation: There is a cycle in the linked list, where tail connects to the first node.

Example 3:

Input: head = [1], pos = -1
Output: no cycle
Explanation: There is no cycle in the linked list.

 

Follow-up:
Can you solve it without using extra space?

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

// The intution is to first find the fact if a loop is there.
// If a loop is there - then we find the size of the loop.
// Then stretch a fast pointer as long as the loop cycle and move the fast and slow at
// the rate of 1 node per cycle and the node where we find the loop is the node where
// the loop started. 

class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        
        ListNode * slow = head;
        ListNode * fast = head;
        
        int size = 0;
        
        while (fast != NULL) {
            slow = slow->next;
            fast = (fast != NULL && fast->next != NULL) ? fast->next->next : NULL;
            if (slow != NULL && slow == fast) {
                do {
                    slow = slow->next;
                    size++;
                } while (fast != slow);
                
                break;
            }
        }
        
        if (size == 0) return NULL;
        
        slow = head;
        fast = head;
        
        while (size > 0) {
            fast = fast->next;
            size--;
        }
        
        while (slow != fast) {
            fast = fast->next;
            slow = slow->next;
        }
       
        return slow;
        
    }
};
