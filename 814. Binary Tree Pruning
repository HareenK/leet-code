814. Binary Tree Pruning
Medium

We are given the head node root of a binary tree, where additionally every node's value is either a 0 or a 1.

Return the same tree where every subtree (of the given tree) not containing a 1 has been removed.

(Recall that the subtree of a node X is X, plus every node that is a descendant of X.)

Example 1:
Input: [1,null,0,0,1]
Output: [1,null,0,null,1]
 
Explanation: 
Only the red nodes satisfy the property "every subtree not containing a 1".
The diagram on the right represents the answer.

Example 2:
Input: [1,0,1,0,0,0,1]
Output: [1,null,1,null,1]

Example 3:
Input: [1,1,0,1,1,0,1,0]
Output: [1,1,0,1,1,null,1]

Note:

    The binary tree will have at most 200 nodes.
    The value of each node will only be 0 or 1.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    bool helper (TreeNode * root) {
        if (root == NULL) 
            return true;
    
        bool left = helper (root->left);
        bool right = helper (root->right);
        if (root->val == 0 && left && right) {
            return true;
        }
        if (left)
            root->left = NULL;  // Or free all nodes starting from root->left. 
        if (right)
            root->right = NULL;
        return false;
    }
    
    TreeNode* pruneTree(TreeNode* root) {
        // prune tree --> 
        
        // if the entire tree is 0 return true upwards. 
        
        if (root == NULL)
            return root;
        
        return helper(root) == true ? NULL : root;
    }
};
