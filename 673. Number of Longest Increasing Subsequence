673. Number of Longest Increasing Subsequence
Medium

Given an unsorted array of integers, find the number of longest increasing subsequence.

Example 1:

Input: [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequence are [1, 3, 4, 7] and [1, 3, 5, 7].

Example 2:

Input: [2,2,2,2,2]
Output: 5
Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.

Note: Length of the given array will be not exceed 2000 and the answer is guaranteed to be fit in 32-bit signed int. 

class Solution {
public:
    int findNumberOfLIS(vector<int>& nums) {
        int size = nums.size();
        
        if (!size)
            return 0;
        
        vector<int> dp (size, 0);
        vector<int> cnt (size, 1);
        
        int maxG = 1;
        
        for (int i = 0; i < size; i++) {
            int maxL = 1;

            for (int j = 0; j < i; j++) {
                if (nums[j] < nums[i]) {
                    if (dp[j] + 1 > maxL) {
                        maxL = dp[j] + 1;
                        cnt[i] = cnt[j];
                    } else if (dp[j]+1 == maxL) {
                        cnt[i] += cnt[j];
                    }
                }
            }
            dp[i] = maxL;
            maxG = max (maxG, dp[i]);
        }
        
        int result = 0;
        
        //cout << "Max - " << maxG << endl; 
        
        for (int i = 0; i < size; i++) {
            // cout << dp[i] << " ";
            if (dp[i] == maxG) {
                result += cnt[i];
            }
        }
        return result;
    }
};
