https://leetcode.com/problems/largest-bst-subtree/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// class Solution {
// public:
    
//     pair<TreeNode *, TreeNode *> dfs (TreeNode * root, int & count) {
//         if (!root) {
//             return {NULL, NULL};
//         }
        
//         if (root->left == NULL && root->right == NULL) {
//             count = 1;
//             return {root, root};
//         }
        
//         int left_count = 0;
        
//         auto left = dfs (root->left, left_count);
        
//         if (left.second != NULL && left.second->val >= root->val) {
//             return false;
//         }
        
//         dfs (root->left, minL, maxL, right_count);
        
//         if (minL != NULL && minL->val < root->val) {
//             return false;
//         }
        
//         count = left_count + right_count + 1;
        
//         *minL = 
        
        
//     }
    
//     int largestBSTSubtree(TreeNode* root) {
        
//         // Min and Max on the left and right .. 
//         // at each node we have to follow the following equation. 
        
//         dfs (root, NULL, NULL);
        
        
        
//     }
// };


class Solution {
class Info {
public:
    Info(int cnt, int lower, int upper):
        cnt_(cnt), lower_(lower), upper_(upper){}
    int cnt() { return cnt_; }
    int lower() { return lower_; }
    int upper() { return upper_; }
private:
    int cnt_, lower_, upper_;
};
public:
    int res = 0;
    Info traversal(TreeNode* root) {
        if (!root) {
            return Info(0, INT_MAX, INT_MIN);
        }
        Info left = traversal(root->left);
        Info right = traversal(root->right);
        if (left.cnt()==-1 || right.cnt()==-1 ||
            left.upper() >= root->val ||
            right.lower() <= root->val) { 
            // clarifying question are we allowing .. 
            // non-unique nodes allowed?? 
            
            return Info(-1, 0, 0);
        }
        int cnt = left.cnt() + right.cnt() + 1;
        res = max(res, cnt);
        return Info(cnt, min(root->val, left.lower()),
                         max(root->val, right.upper()));
    }
    int largestBSTSubtree(TreeNode* root) {
        traversal(root);
        return res;
    }
};
