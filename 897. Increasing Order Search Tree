897. Increasing Order Search Tree

Easy

Given a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only 1 right child.

Example 1:
Input: [5,3,6,2,4,null,8,1,null,null,null,7,9]

       5
      / \
    3    6
   / \    \
  2   4    8
 /        / \ 
1        7   9

Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]

 1
  \
   2
    \
     3
      \
       4
        \
         5
          \
           6
            \
             7
              \
               8
                \
                 9  

 

Constraints:

    The number of nodes in the given tree will be between 1 and 100.
    Each node will have a unique integer value from 0 to 1000.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode * head = NULL;
    TreeNode * tail = NULL;
    
    void recurse (TreeNode * root) {
        if (root == NULL)
            return;
        
        recurse (root->left);
        
        if (root->left == NULL) {
            if (head == NULL) {
                head = root;
                tail = root;
            }
        }
        
        root->left = NULL; 
        
        // 
        // Crazy condition to miss. Run through an example.
        // 
        
        if (tail != root)
            tail->right = root;
        
        tail = root;
        
        recurse (root->right);
        return;
    }
    
    TreeNode* increasingBST(TreeNode* root) {
        recurse (root);
        return head;
    }
};
