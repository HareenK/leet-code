https://leetcode.com/problems/spiral-matrix-iii/

885. Spiral Matrix III
Medium

On a 2 dimensional grid with R rows and C columns, we start at (r0, c0) facing east.

Here, the north-west corner of the grid is at the first row and column, and the south-east corner of the grid is at the last row and column.

Now, we walk in a clockwise spiral shape to visit every position in this grid. 

Whenever we would move outside the boundary of the grid, we continue our walk outside the grid (but may return to the grid boundary later.) 

Eventually, we reach all R * C spaces of the grid.

Return a list of coordinates representing the positions of the grid in the order they were visited.

 

Example 1:

Input: R = 1, C = 4, r0 = 0, c0 = 0
Output: [[0,0],[0,1],[0,2],[0,3]]


 

Example 2:

Input: R = 5, C = 6, r0 = 1, c0 = 4
Output: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]


// inline bool isvalid(vector<int> &cur, int R, int C){
// 	if(cur[0] >= 0 && cur[1] >= 0 && cur[0] < R && cur[1] < C)
// 		return true;
// 	return false;
// }
// class Solution {
// public: 
// vector<vector<int>> spiralMatrixIII(int R, int C, int r0, int c0) {
//         vector<vector<int>> ans;
//         vector<int> cur = {r0, c0};
//         ans.push_back(cur);
//         vector<vector<int>> dir = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
//         int totsteps = 2*max(R, C); totsteps*=totsteps;
// 		int stepi = 0, d = 0;                    //tracks i th step and d th direction change
//         int linelen = 1;
//         while(stepi <= totsteps){
//             for(int a = 1; a <=2; ++a){          // looping twice for same length
//                 int k = 1;                       //tracks steps taken in current line
//                 while(k <= linelen){
//                     cur[0] += dir[d][0];
//                     cur[1] += dir[d][1];
//                     if(isvalid(cur, R, C)) ans.push_back(cur);
//                     k++; stepi++;
//                 }
//                 d = (d+1)%4;
//             }
//             linelen++;
//         }
//         return ans;
//     }
// };


// Instead of trying to work out any complicated math, I just started "walking"
// using aviation-style cardinal directions (90 degrees = East/Right, 180 = South/Down, 270 = West/Left, 360 = North/Up).

// For each direction, track the limit to how many steps we take in this direction, and how many steps we've taken. The limit is set initially for one step right, one step down, two steps left, and two steps up.

// Once our number of steps reaches the limit, change direction. So if we were heading right, change to down, if heading down, change to left, etc. We also increase the limit by 2, since the next time we head in this direction, we'll need two more steps.

// If our coordinates happen to fall within the boundaries of the "good area" (r >= 0 && r < R && c >= 0 && c < C), then push them to the return list.

// We seem to waste a lot of time "walking" outside of the good area, but it's simple addition and branching and so takes little additional runtime.

// We continue to spiral around until we've pushed the same number of coordinates that should be within the good area.

class Solution {
public:
    vector<vector<int>> spiralMatrixIII(int R, int C, int r0, int c0) 
    {
        int direction = 90;
        int rlimit = 1;
        int rstep = 0;
        
        int dlimit = 1;
        int dstep = 0;
        
        int llimit = 2;
        int lstep = 0;
        
        int ulimit = 2;
        int ustep = 0;
        
        vector<int> coord(2);
        vector<vector<int>> ret;
        ret.reserve(R*C);
        
        //right, down, left, up
        int c = c0;
        int r = r0;
        
        while(ret.size() < R*C)
        {
            if(c >= 0 && c < C && r >= 0 && r < R)
            {
                coord[0] = r;
                coord[1] = c;
                ret.push_back(coord);
            }
            
            //now take a step in the direction we're facing.
            switch(direction)
            {
                case 90:
                    c++;
                    rstep++;
                    if(rstep == rlimit)
                    {
                        direction = 180;
                        rstep = 0;
                        rlimit += 2;
                    }
                    break;
                case 180:
                    r++;
                    dstep++;
                    if(dstep == dlimit)
                    {
                        direction = 270;
                        dstep = 0;
                        dlimit += 2;
                    }
                    break;
                case 270:
                    c--;
                    lstep++;
                    if(lstep == llimit)
                    {
                        direction = 360;
                        lstep = 0;
                        llimit += 2;
                    }
                    break;
                case 360:
                    r--;
                    ustep++;
                    if(ustep == ulimit)
                    {
                        direction = 90;
                        ustep = 0;
                        ulimit += 2;
                    }
                    break;
            }
        }
    
        return ret;
    }
};
