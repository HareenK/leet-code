708. Insert into a Sorted Circular Linked List

====
Edge-case Examples. 
[1] : insert 0. Should be inserted in the last link.
[3 5 1] : insert 0. It should be added in the link 5-1. 

Notes: 
Made mistake on a few edges case. Consider the case where you have to add numbers lower than the current min and larger than current max. Those will be add at the link where we completed a loop.
====

Given a node from a Circular Linked List which is sorted in ascending order, write a function to insert a value insertVal into the list such that it remains a sorted circular list. The given node can be a reference to any single node in the list, and may not be necessarily the smallest value in the circular list.

If there are multiple suitable places for insertion, you may choose any place to insert the new value. After the insertion, the circular list should remain sorted.

If the list is empty (i.e., given node is null), you should create a new single circular list and return the reference to that single node. Otherwise, you should return the original given node.

 

Example 1:

 

Input: head = [3,4,1], insertVal = 2
Output: [3,4,1,2]
Explanation: In the figure above, there is a sorted circular list of three elements. You are given a reference to the node with value 3, and we need to insert 2 into the list. The new node should be inserted between node 1 and node 3. After the insertion, the list should look like this, and we should still return node 3.



Example 2:

Input: head = [], insertVal = 1
Output: [1]
Explanation: The list is empty (given head is null). We create a new single circular list and return the reference to that single node.

Example 3:

Input: head = [1], insertVal = 0
Output: [1,0]




/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;

    Node() {}

    Node(int _val) {
        val = _val;
        next = NULL;
    }

    Node(int _val, Node* _next) {
        val = _val;
        next = _next;
    }
};
*/

class Solution {
public:
    Node* insert(Node* head, int insertVal) {
        // Move in the linked-list until you find the condition, where
        // insertVal > prev and insertVal < curr. 
        // if curr is NULL it mean we cann't make any insertion choices. 
        
        Node * node = NULL;
        
        if (head == NULL) {
            node = new Node (insertVal);
            node->next = node;
            return node;
        }
        
        Node * curr = head->next;
        Node * prev = head;
        
        while (curr != head) {
            // we have found the cycle-completion link.
            // Insert val if val is less than curr or great than prev.
            
            if  (((curr->val < prev->val) && (insertVal <= curr->val || insertVal >= prev->val)) 
                 || 
                 (insertVal >= prev->val && insertVal < curr->val)) {
                    node = new Node (insertVal);
                    prev->next = node;
                    node->next = curr;
                    return head;
                }
            prev = curr;
            curr = curr->next;
        }
        
        // We found numbers less than start or greater than end ?? insert at the end.
        node = new Node (insertVal);
        prev->next = node;
        node->next = curr; 
        return head; 
        
    }
};
