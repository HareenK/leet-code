34. Find First and Last Position of Element in Sorted Array
Medium

Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

class Solution {
    public:
    
    int leftIndex (vector<int> & nums, int target) {
        int left = 0;
        int right = nums.size()-1;
        
        while (left <= right) {
            int mid = left + (right-left)/2;
            if (target <= nums[mid]) {
                right = mid-1;
            } else {
                left = mid+1;
            }
        }
        
        return right;
        
    } 
    
    int rightIndex (vector<int> & nums, int target) {
        int left = 0;
        int right = nums.size()-1;
        
        while (left <= right) {
            int mid = left + (right-left)/2;
            if (target < nums[mid]) {
                right = mid-1;
            } else {
                left = mid+1;
            }
        }
        return left;
    }
    
    vector<int> searchRange(vector<int>& nums, int target) {
        // find the largest number lower than target - then check if the right number is 
        // target put result[0] = right number.
        
        // find the smallest number larger than target - then check if the left number is
        // target put result[1] = left number.
        
        int size = nums.size();
        
        if (!size) {
            return {-1,-1};
        }
        
        vector<int> result(2,-1);
        
        int left = leftIndex (nums, target);
        
        if (left+1 < size && nums[left+1] == target) {
            result[0] = left+1;
        }
        
        int right = rightIndex (nums, target);
        
        if (right-1 >= 0 && nums[right-1] == target) {
            result[1] = right-1;
        }
        
        return result;
    }
};
