436. Find Right Interval
Medium

Given a set of intervals, for each of the interval i, check if there exists an interval j whose start point is bigger than or equal to the end point of the interval i, which can be called that j is on the "right" of i.

For any interval i, you need to store the minimum interval j's index, which means that the interval j has the minimum start point to build the "right" relationship for interval i. If the interval j doesn't exist, store -1 for the interval i. Finally, you need output the stored value of each interval as an array.

Note:

    You may assume the interval's end point is always bigger than its start point.
    You may assume none of these intervals have the same start point.

 

Example 1:

Input: [ [1,2] ]

Output: [-1]

Explanation: There is only one interval in the collection, so it outputs -1.

Example 2:

Input: [ [3,4], [2,3], [1,2] ]

Output: [-1, 0, 1]

Explanation: There is no satisfied "right" interval for [3,4].
For [2,3], the interval [3,4] has minimum-"right" start point;
For [1,2], the interval [2,3] has minimum-"right" start point.

Example 3:

Input: [ [1,4], [2,3], [3,4] ]

Output: [-1, 2, -1]

Explanation: There is no satisfied "right" interval for [1,4] and [3,4].
For [2,3], the interval [3,4] has minimum-"right" start point.

NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.
Accepted
46,974
Submissions
99,915

class Solution {
public:
    typedef pair<vector<int>,int> pp;
    
    int findRightPartner (int i, vector<pp> & elems) {
        // given an end find the largest end less than equal to end.
        
        int start = i+1;
        int end = elems.size()-1;
        
        int target = elems[i].first[1];
        
        while (start <= end) {
            int mid = start + (end-start)/2;
            int curr = elems[mid].first[0];
            if (target == curr) {
                return mid;
            } else if (target > curr) {
                start = mid+1;
            } else {
                end = mid-1;
            }
        }
        
        return start == elems.size() ? -1 : start;
    }
    
    vector<int> findRightInterval(vector<vector<int>>& intervals) {
        // [[3,4],[2,3],[1,2]]
        
        // [1,2] [2,3] [3,4]
        
        // sorting based on the starting point. 
        // then do a binary search. 
        
        vector<pp> elems; 
        
        int size = intervals.size();
        
        for (int i = 0; i < intervals.size(); i++) {
            elems.push_back({intervals[i], i});
        }
        
        sort (elems.begin(), elems.end(), [](const pp & a, const pp & b) {
             return a.first[0] < b.first[0];
        });
        
        vector<int> results (size, -1);
        
        // for (auto & elem : elems) {
        //     cout << elem.second << " : " << elem.first[0] << " " << elem.first[1] << endl;
        // }
    
        for (int i = 0; i < elems.size()-1; i++) {
            int res = findRightPartner (i, elems);
            // cout << elems[i].second << " " << (res != -1 ? elems[res].second : res) << endl;
            results[elems[i].second] = res != -1 ? elems[res].second : res;
        }
        
        return results;
    }
};
