377. Combination Sum IV
Medium

Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.

Example:

nums = [1, 2, 3]
target = 4

The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)

Note that different sequences are counted as different combinations.

Therefore the output is 7.

 

Follow up:
What if negative numbers are allowed in the given array?
How does it change the problem?
What limitation we need to add to the question to allow negative numbers?

Credits:
Special thanks to @pbrother for adding this problem and creating all test cases.

// class Solution {
// public:
//     int combinationSum4(vector<int>& nums, int target) {
//         // [1,2,3] -- 
        
//         // (1 1 1 1) --
            
//         // Different ways of to get a cobination sum 
        
//         // cols - target Sum.
//         // rows - coins we have. 
        
//         int size = nums.size();
        
//         vector<vector<int>> dp (size, vector<int> (target+1, 0));
        
//         int rows = dp.size();
//         int cols = dp[0].size();
        
//         for (int r = 0; r < rows; r++) {
//             dp [r][0] = 1;
//         }
            
//         for (int r = 0; r <  rows; r++) { // rows - coins.
//             for (int c = 1; c < cols; c++) { // cols - target val.
//                 if (r == 0) {
//                     if (c-nums[r] >= 0) {
//                         dp[r][c] = dp[r][c-nums[r]];
//                     }
//                 } else {
//                     dp[r][c] = dp[r-1][c];
//                     if (c - nums[r] >= 0) {
//                         dp[r][c] += dp[r][c-nums[r]];
//                     }
//                 }
//             }   
//         }
        
//         for (auto & row : dp) {
//             for (auto & elem : row) {
//                 cout << elem << " ";
//             }
//             cout << endl;
//         }
        
//         return dp[rows-1][cols-1];
//     }
// };

#define db double
class Solution {
public:
    int combinationSum4(vector<int>& nums, int target) {
        int n = nums.size();
        vector<db> dp(target+1);
        dp[0] = 1;
        
        for(int i = 1; i <= target; ++i) {
            for(int j = 0; j < n; ++j) {
                if (i - nums[j] >= 0) {
                    dp[i] += dp[i - nums[j]];
                }
            }
        }
        
        return dp[target];
    }
};
