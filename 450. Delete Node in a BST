450. Delete Node in a BST
Medium

Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

    Search for a node to remove.
    If the node is found, delete the node.

Note: Time complexity should be O(height of tree).

Example:

root = [5,3,6,2,4,null,7]
key = 3

    5
   / \
  3   6
 / \   \
2   4   7

Given key to delete is 3. So we find the node with value 3 and delete it.

One valid answer is [5,4,6,2,null,null,7], shown in the following BST.

    5
   / \
  4   6
 /     \
2       7

Another valid answer is [5,2,6,null,4,null,7].

    5
   / \
  2   6
   \   \
    4   7


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findRightReplacementAndRemove (TreeNode * root) {
        int result;
        
        if (root ==  NULL) {
            return 0;
        }
        
        TreeNode * curr = root->right;
        TreeNode * prev = root;
        
        while (curr->left != NULL) {
            prev = curr;
            curr = curr->left;
        }
    
        result = curr->val;
        if (prev->left == curr) {
            if (curr->right != NULL) {
                prev->left = curr->right;
            } else {
                prev->left = NULL;
            }
        } else {
            prev->right = curr->right;
        }
        delete(curr);
    
        return result;
    }
    
    int findLeftReplacementAndRemove (TreeNode * root) {
        int result;
        
        if (root ==  NULL) {
            return 0;
        }
        
        TreeNode * curr = root->left;
        TreeNode * prev = root;
        
        while (curr->right != NULL) {
            prev = curr;
            curr = curr->right;
        }
    
        result = curr->val;
        
        if (prev->right == curr) {
            if (curr->left != NULL) {
                prev->right = curr->left;
            } else {
                prev->right = NULL;
            }
        } else {
            prev->left = curr->left;
        }
        
        delete(curr);
    
        return result;
    }
    
    
    TreeNode* deleteNode(TreeNode* root, int key) {
        // IC: Will all nodes be of unique val? OC: unique is Input unique.
        // Find the key .. then check if he has a right node. if he has right node, 
        // find the smallest number larger than the key and replace it with the current node.
        // If right doesn't exist. then promote the left node to the curr node.
        // If left doesn't exist .. remove node. 
        
        if (!root)
            return NULL;
        
        TreeNode * curr = root;
        TreeNode * prev = NULL;
        while (curr != NULL) { // Will pass for root too. 
            if (key == curr->val) {
                break;
            } else if (key > curr->val) {
                prev = curr;
                curr = curr->right;
            } else {
                prev = curr;
                curr = curr->left;
            }
        }
        
        // cout << "p - " << prev->val << "c - " << curr->val << endl; 
        
        if (curr == NULL)
            return root;
        
        // cout << "p - " << prev->val << "c - " << curr->val << endl; 
        
        if (curr->right != NULL) {
            int val = findRightReplacementAndRemove (curr);
            curr->val = val;
        } else if (curr->left != NULL) {
            int val = findLeftReplacementAndRemove (curr);
            curr->val = val;
        } else if (prev != NULL) {
            // cout << "p - " << prev->val << "c - " << curr->val << endl; 
            if (prev->left == curr) {
                prev->left = NULL;
                delete(curr);
            } else {
                prev->right = NULL;
                delete(curr);
            }
        } else {
            delete root;
            return NULL;
        }

        return root; 
            
    }
};
