85. Maximal Rectangle

Hard

Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

Example:

Input:
[
  ["1","0","1","0","0"],
  ["1","0","1","1","1"],
  ["1","1","1","1","1"],
  ["1","0","0","1","0"]
]
Output: 6

// class Solution {
// public:
//     int maximalRectangle(vector<vector<char>>& matrix) {
        
//         // ["1","0","1","0","0"],
//         // ["1","0","1","1","1"],
//         // ["1","1","1","1","1"],
//         // ["1","0","0","1","0"]
        
//         // At each position we calculate ... 
//         // Min cols and Min rows -- 
        
//         int rows = matrix.size();
//         if (rows == 0)
//             return 0;
//         int cols = matrix[0].size();
        
//         vector<vector<pair<int,int>>> dp (rows, vector<pair<int,int>> (cols, {0,0}));
        
//         int result = 0;
        
//         if (matrix[0][0] == '1') {
//             dp[0][0].first = 1; dp[0][0].second = 1; result = 1;
//         }
        
//         for (int r = 1; r < rows; r++) {
//             if (matrix[r][0] == '1') {
//                 dp[r][0].first = 1;
//                 dp[r][0].second = dp[r-1][0].second + 1;
//                 result = max (result, dp[r][0].second);
//             }
//         }
        
//         for (int c = 1; c < cols; c++) {
//             if (matrix[0][c] == '1') {
//                 dp[0][c].first = dp[0][c-1].first + 1;
//                 dp[0][c].second = 1;
//                 result = max (result, dp[0][c].first);
//             }
//         }
        
//         for (int r = 1; r < rows; r++) {
//             for (int c = 1; c < cols; c++) {
                
//                 if (matrix[r][c] == '1') {
//                     int rowMin = min (matrix[r-1][c-1] == 1 ? dp[r-1][c-1].first : INT_MAX, 
//                                       matrix[r-1][c] == 1 ? dp[r-1][c].first : INT_MAX);
//                     dp[r][c].first = rowMin != INT_MAX ? rowMin + 1 : 1;
//                     int colMin = min (matrix[r-1][c-1] == 1 ? dp[r-1][c-1].second : INT_MAX,
//                                       matrix[r-1][c] == 1 ? dp[r-1][c].second : INT_MAX);
//                     dp[r][c].second = colMin != INT_MAX ? colMin + 1 : 1;
//                     result = max (result, dp[r][c].first * dp[r][c].second);
//                 }
//             }
//         }
        
//         // for (auto & row : dp) {
//         //     for (auto & col : row) {
//         //         cout << "[" << col.first << "," << col.second << "]" << " ";
//         //     }
//         //     cout << endl;
//         // }
        
//         return result;
//     }
// };
class Solution {
    public:
int maximalRectangle(vector<vector<char>>& matrix) {
      // matrix dimension
      int nRow = matrix.size();
      int nCol = nRow? matrix[0].size() : 0;

      // for each row r in matrix, define
      vector<int> H(nCol, 0);      
      // H[c]: height of consecutive 1s from matrix[r][c] and up
      vector<int> L(nCol, 0);      
      // L[c]: far left index of consecutive 1s from matrix[r][c] to left which can keep H[c]
      vector<int> R(nCol, nCol-1); 
      // R[c]: far right index of consecutive 1s from matrix[r][c] to right which can keep H[c]
      // Note: for row r as base, the area of maximal rectangle including matrix[r][c] is H[c]*(R[c]-L[c]+1)
            
      int res = 0;

      for (auto& row : matrix) { // for each row (used as rectangle's base)
        int curL = 0;
        for (int c = 0; c < nCol; ++c) { // scan cols left to right to populate L[] and H[]
            if (row[c] == '1')
                ++H[c], L[c] = max(L[c], curL);
            else 
                H[c] = 0, L[c] = 0, curL = c+1;                
        }

        int curR = nCol-1;
        for (int c = nCol-1; c >= 0; --c) { // scan cols right to left to populate R[]
            if (row[c] == '1')
                R[c] = min(R[c], curR);
            else 
                R[c] = nCol-1, curR = c-1;
        }

        for (int c = 0; c < nCol; ++c) // scan all cols to update maximal rectangle area
          res = max(res, H[c]*(R[c]-L[c]+1));
      }
      return res;        
}
};
