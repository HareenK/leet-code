1008. Construct Binary Search Tree from Preorder Traversal

Return the root node of a binary search tree that matches the given preorder traversal.

(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val, and any descendant of node.right has a value > node.val.  Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)

It's guaranteed that for the given test cases there is always possible to find a binary search tree with the given requirements.

Example 1:

Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]

class Solution {
    public:
    int size = 0;
    
    TreeNode * helper (vector<int> & preorder, int & index, int minL, int maxL) {
        if (index == size) {
            return NULL;
        }
        int val = preorder[index];
        
        if (val < minL  || val > maxL) {
            return NULL;
        }
        
        index = index+1;
        TreeNode * root = new TreeNode (val);
        root->left = helper (preorder, index, minL, val);
        root->right = helper (preorder, index, val, maxL);
        
        return root;
    }
    
    TreeNode * bstFromPreorder (vector<int> & preorder) {
        size = preorder.size();
        int index = 0;
        return helper (preorder, index, INT_MIN, INT_MAX);      
    }
