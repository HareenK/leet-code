#####

Input crashes : [[0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,1,0,1,1,0],[0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,1,0],[0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,0],[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],[1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],[1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0],[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0],[0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0],[0,0,1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,0,0,0],[0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0],[0,0,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0]]

when to use auto & vs auto ?? why does auto crash. 

class Solution {
public:
    
    int bfs (vector<vector<int>> grid, int r, int c) {
         int rows = grid.size();
        
        if (rows == 0)
            return 0;
        
        int cols = grid[0].size();
        
        int perimeter = 0;
        
        queue<pair<int,int>> q; // r,c
        
        vector<int> dir = {0,1,0,-1,0};
        
        q.push({r,c});
        grid[r][c] = 2;
        
        while (!q.empty()) {
            auto curr = q.front();
            q.pop();
            
            int cr = curr.first;
            int cc = curr.second;
            
            cout << "cr - " << cr << " cc - " << cc << endl; 
            
            // mark node as visited.
           
            int lands = 0;
            for (int i = 0; i < dir.size()-1; i++) {
                int nr = cr+dir[i];
                int nc = cc+dir[i+1];
                if (cr == 6 && cc == 5)
                    cout << nr << " " << nc << endl;
                if (nr >= 0 && nr < rows &&
                    nc >= 0 && nc < cols) {
                    if (grid[nr][nc] == 1) {
                        q.push({nr,nc});
                        grid[nr][nc] = 2;
                    }
                    if (grid[nr][nc] != 0) {
                        lands++;
                    }
                }
                // cout << "water - " << (4-lands) << endl;    
            }
            if (cr == 6 && cc == 5)
                    cout << "peri -" << perimeter << endl;
            perimeter += (4-lands);
        }
        return perimeter;
    }
    
    int islandPerimeter(vector<vector<int>>& grid) {
        // Once you find a '1' -- check on all four sides and see there is land or an island.
        // Do a DFS.
        // Time you code.
        
        // Can I Modify the existing grid? 
        
        int rows = grid.size();
        
        if (rows == 0)
            return 0;
        
        int cols = grid[0].size();
        
        int perimeter = 0;
        
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                if (grid[r][c] == 1) {
                    perimeter = bfs (grid, r, c);
                    return perimeter;
                }
            }
        }
        
        return perimeter;
        
    }
};
########
