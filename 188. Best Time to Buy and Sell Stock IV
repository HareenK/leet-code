188. Best Time to Buy and Sell Stock IV
Hard

Say you have an array for which the i-th element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most k transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

Example 1:

Input: [2,4,1], k = 2
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.

Example 2:

Input: [3,2,6,5,0,3], k = 2
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4.
             Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.

class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        
        int size = prices.size();
        
        // Handle the special case very k is very large. 
        
        if (size == 0)
            return 0;
        
        if (2*k > size) {
            int res = 0;
            for (int i = 1; i < size; i++) {
                res += max (0, prices[i]-prices[i-1]);
            }
            return res;
        }
        
        vector<vector<int>> dp (k+1, vector<int>(size, 0));
        
        int rows = dp.size();
        int cols = dp[0].size();
        
        // See it as a 0/1 knap-sack problem. 
        
        for (int r = 1; r < rows; r++) {
            int maxL = -prices[0];
            for (int c = 1; c < cols; c++) {
                 maxL = max (maxL, dp[r-1][c-1] - prices[c-1]);
                 dp[r][c] = max (dp[r][c-1], prices[c] + maxL);
            }
        }
        
        return dp[rows-1][cols-1];
    }
};
