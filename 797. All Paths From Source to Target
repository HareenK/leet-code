797. All Paths From Source to Target
Medium

Given a directed, acyclic graph of N nodes.  Find all possible paths from node 0 to node N-1, and return them in any order.

The graph is given as follows:  the nodes are 0, 1, ..., graph.length - 1.  graph[i] is a list of all nodes j for which the edge (i, j) exists.

Example:
Input: [[1,2], [3], [3], []] 
Output: [[0,1,3],[0,2,3]] 
Explanation: The graph looks like this:
0--->1
|    |
v    v
2--->3
There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.

Note:

    The number of nodes in the graph will be in the range [2, 15].
    You can print different paths in any order, but you should keep the order of nodes inside one path.
    
class Solution {
public:
    unordered_set <int> visited; 
    int target;
    vector<vector<int>> result;
    vector<vector<int>> graphG;
    //unordered_map <int, vector<int>> mapG;
    
    bool dfs (vector<int> & path) {
        int curr = path[path.size()-1];
        
        if (curr == target) { // We can stop search here since graph is acyclic.
            result.push_back(path);
            return true;
        }
        
        visited.insert (curr);
        
        for (auto & next : graphG[curr]) {
            if (visited.count(next) == 0) {
                path.emplace_back(next);
                (void) dfs (path);
                path.pop_back();
            }
        }
        
        visited.erase (curr);
        
        return false;
    }
    
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        // do a dfs. We need caching too.
        
        graphG = graph;
        target = graph.size()-1;
        
        vector<int> path;
        
        path.emplace_back(0);
        (void) dfs (path);
        
        return result;
    }
};
