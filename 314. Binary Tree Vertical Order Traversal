314. Binary Tree Vertical Order Traversal
Medium

Given a binary tree, return the vertical order traversal of its nodes' values. (ie, from top to bottom, column by column).

If two nodes are in the same row and column, the order should be from left to right.

Examples 1:

Input: [3,9,20,null,null,15,7]

   3
  /\
 /  \
 9  20
    /\
   /  \
  15   7 

Output:

[
  [9],
  [3,15],
  [20],
  [7]
]

Examples 2:

Input: [3,9,8,4,0,1,7]

     3
    /\
   /  \
   9   8
  /\  /\
 /  \/  \
 4  01   7 

Output:

[
  [4],
  [9],
  [3,0,1],
  [8],
  [7]
]

Examples 3:

Input: [3,9,8,4,0,1,7,null,null,null,2,5] (0's right child is 2 and 1's left child is 5)

     3
    /\
   /  \
   9   8
  /\  /\
 /  \/  \
 4  01   7
    /\
   /  \
   5   2

Output:

[
  [4],
  [9,5],
  [3,0,1],
  [8,2],
  [7]
]

Accepted
115,816
Submissions
259,364

class Solution {
private:
    vector<vector<int>> rec;
    int cnt = 0;
    
    void dfs(TreeNode* root, int x, int h) {
        if (!root) return;
        dfs(root->left, x-1, h+1);
        rec.push_back(vector<int>{ root->val, x, h, cnt });
        cnt += 1;
        dfs(root->right, x+1, h+1);
    }
    
public:
    vector<vector<int>> verticalOrder(TreeNode* root) {
        // dfs
        dfs(root, 0, 0);
        // generate rst
        vector<vector<int>> rst;
        sort(rec.begin(), rec.end(), [](const vector<int>& a, const vector<int>& b) {
            if (a[1] == b[1] and a[2] == b[2]) return a[3] < b[3];
            else if (a[1] == b[1]) return a[2] < b[2]; 
            else return a[1] < b[1];
        });
        
        int curx = INT_MIN;
        for (auto& r : rec) {
            if (r[1] == curx) {
                rst.back().push_back(r[0]);
            }
            else {
                curx = r[1];
                rst.emplace_back(1, r[0]);
            }
        }
        return rst;
    }
};
