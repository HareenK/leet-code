// class Solution {
// public:
//     bool isSubsequence(string s, string t) {
//         // Check if s is subseq of t. 
        
//         if (s.size() > t.size())
//             return false;
        
//         int sIndex = 0, tIndex = 0;
        
//         while (sIndex < s.size() && tIndex < t.size()) {
//             if (s[sIndex] == t[tIndex]) {
//                 sIndex++; tIndex++;
//             } else {
//                 tIndex++;
//             }
//         }
        
//         if (sIndex == s.size()) {
//             return true;
//         } 
        
//         return false;   
//     }
// };

// How do you proceed for working with 1B strings. 


class Solution {
    public: 
    bool isSubsequence (string s, string t) {
        if (s.size() > t.size())
            return false;
        
        unordered_map <char, vector<int>> map;
        
        for (int i = 0; i < t.size(); i++) {
            if (map.find (t[i]) != map.end()) {
                map[t[i]].emplace_back(i);
            } else {
                map[t[i]] = {i};
            }
        }
        int prev = -1;
        for (int i = 0; i < s.size(); i++) {
            if (map.find(s[i]) != map.end()) {
                // use upper_bound - finds the largest number less than equal to target.
                vector<int> vec = map[s[i]];
                auto it = upper_bound(vec.begin(), vec.end(), prev);
                int pos = it - vec.begin();
                if (pos == vec.size())
                    return false;
                prev = vec[pos];
            } else {
                // couldn't find the target char .. return false;
                return false;
            }
        }
        
        return true;
    }
};
