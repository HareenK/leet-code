# Notes: 

Knapsack 0/1 problem --



518. Coin Change 2
Medium

You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.

 

Example 1:

Input: amount = 5, coins = [1, 2, 5]
Output: 4
Explanation: there are four ways to make up the amount:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1

Example 2:

Input: amount = 3, coins = [2]
Output: 0
Explanation: the amount of 3 cannot be made up just with coins of 2.

Example 3:

Input: amount = 10, coins = [10] 
Output: 1



class Solution {
public:
    int change(int amount, vector<int>& coins) {
        // Dp solution - 0/1 knapsack problem.
        
        //    [0 1 2 3 4 5]
        //  1  1 1 1 1 1 1 
        //  2  1 1 2 2 3 3  
        //  5  1 1 2 2 3 4
        
        int size = coins.size();
        
        if (size == 0) {
            return amount == 0 ? 1 : 0;
        }
        
        vector<vector<int>> dp (size, vector<int> (amount+1, 0));
        
        int row = dp.size();
        int col = dp[0].size();
        
        for (int r = 0; r < row; r++) {
            dp[r][0] = 1;
        }
        
        for (int c = 1; c < col; c++) {
            dp[0][c] = c % coins[0] == 0 ? 1 : 0;
        }
        
        for (int i = 1; i < row; i++) {
            for (int am = 1; am < col; am++) {
                if (am - coins[i] >= 0) {
                    dp[i][am] = dp[i][am-coins[i]];
                }
                dp[i][am] += dp[i-1][am];
            }
        }
        return dp[row-1][col-1];
    }
};
