275. H-Index II
Medium

Given an array of citations sorted in ascending order (each citation is a non-negative integer) of a researcher, write a function to compute the researcher's h-index.

According to the definition of h-index on Wikipedia: "A scientist has index h if h of his/her N papers have at least h citations each, and the other N âˆ’ h papers have no more than h citations each."

Example:

Input: citations = [0,1,3,5,6]
Output: 3 
Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had 
             received 0, 1, 3, 5, 6 citations respectively. 
             Since the researcher has 3 papers with at least 3 citations each and the remaining 
             two with no more than 3 citations each, her h-index is 3.

Note:

If there are several possible values for h, the maximum one is taken as the h-index.

Follow up:

    This is a follow up problem to H-Index, where citations is now guaranteed to be sorted in ascending order.
    Could you solve it in logarithmic time complexity?

Accepted
115,162
Submissions
322,146

class Solution {
public:
    int hIndex(vector<int>& citations) {
        // Binary search. 
        // have a mid and check if the num[mid] > mid+1 move right.
        // have mid - 
                
        int size = citations.size();
        int start = 0, end = size-1;
        
        while (start <= end) {
            int mid = start + (end - start)/2;
            if (citations[mid] == size-mid) {
                return size-mid;
            } else if (citations[mid] > size-mid) {
                end = mid-1;
            } else {
                start = mid+1;
            }
        }
        return size-start;
    }
};

/*
Draw a chart with citations numbers and the paper id. 
The main thing is: imagine a "size-n" line which intersects ... the citation and paper-id.
*/

![concept](https://github.com/kvsrh/leet-code/blob/master/images/Screen%20Shot%202020-06-18%20at%204.49.26%20PM.png)
