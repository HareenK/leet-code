986. Interval List Intersections
Medium

Given two lists of closed intervals, each list of intervals is pairwise disjoint and in sorted order.

Return the intersection of these two interval lists.

(Formally, a closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.  The intersection of two closed intervals is a set of real numbers that is either empty, or can be represented as a closed interval.  For example, the intersection of [1, 3] and [2, 4] is [2, 3].)

Example 1:

Input: A = [[0,2],[5,10],[13,23],[24,25]], B = [[1,5],[8,12],[15,24],[25,26]]
Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]

Note:

    0 <= A.length < 1000
    0 <= B.length < 1000
    0 <= A[i].start, A[i].end, B[i].start, B[i].end < 10^9



class Solution {
public:
    vector<vector<int>> intervalIntersection(vector<vector<int>>& A, 
                                             vector<vector<int>>& B) {
        
        // Sort the two vectors based on their start-time. 
        // compare based on the end-time.
        // two-pointer method -- 
        
        int one = 0;
        int two = 0;
        
        int ASize = A.size();
        int BSize = B.size();
        
        vector<vector<int>> results;
        
        while (one < ASize && two < BSize) {
            auto & Aelem = A[one];
            auto & Belem = B[two];
            
            if (Aelem[1] < Belem[1]) {
                if (max (Aelem[0], Belem[0]) <= Aelem[1])
                    results.push_back ({max (Aelem[0], Belem[0]), Aelem[1]});
                one++;
            } else {
                if (max (Aelem[0], Belem[0]) <= Belem[1])
                    results.push_back ({max (Aelem[0], Belem[0]), Belem[1]});
                two++;
            }
        }
        return results; 
    }
};
