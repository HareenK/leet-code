844. Backspace String Compare

844. Backspace String Compare
Easy

Given two strings S and T, return if they are equal when both are typed into empty text editors. # means a backspace character.

Note that after backspacing an empty text, the text will continue empty.

Example 1:

Input: S = "ab#c", T = "ad#c"
Output: true
Explanation: Both S and T become "ac".

Example 2:

Input: S = "ab##", T = "c#d#"
Output: true
Explanation: Both S and T become "".

Example 3:

Input: S = "a##c", T = "#a#c"
Output: true
Explanation: Both S and T become "c".

Example 4:

Input: S = "a#c", T = "b"
Output: false
Explanation: S becomes "c" while T becomes "b".

Note:

    1 <= S.length <= 200
    1 <= T.length <= 200
    S and T only contain lowercase letters and '#' characters.

Follow up:

    Can you solve it in O(N) time and O(1) space?

class Solution {
public: 
    bool backspaceCompare (string S, string T) {
        // Nice two element traversing ... 
        int sizeS = S.size();
        int sizeT = T.size();
        
        int sIndex = sizeS-1;
        int tIndex = sizeT-1;
        
        while (sIndex >= 0 || tIndex >= 0) {
            int SBackCount = 0;
            int TBackCount = 0;
            
            while (sIndex >= 0 && S[sIndex] == '#') { // We could backspaces and still endup at a backspace. 
            
                while (sIndex >= 0 && S[sIndex] == '#') { // Count how many steps to move back.
                    SBackCount++;
                    sIndex--;
                }

                while (sIndex >= 0 && SBackCount > 0 && S[sIndex] != '#') { 
                    // Skip spaces in SBackCount--. This way if we have more spaces in the backwalk those 
                    // taken care of too. 
                                                                            
                    sIndex--; SBackCount--;
                }
            }
            
            while (tIndex >= 0 && T[tIndex] == '#') {
            
                while (tIndex >= 0 && T[tIndex] == '#') {
                    TBackCount++;
                    tIndex--;
                }

                while (tIndex >= 0 && TBackCount > 0 && T[tIndex] != '#') {
                    tIndex--; TBackCount--;
                }
            }
            
            char s = sIndex >= 0 ? S[sIndex] : '#';
            char t = tIndex >= 0 ? T[tIndex] : '#';
            
            if (s != t) {
                return false;
            }
            
            sIndex--; tIndex--;
        }
        
        return true;
    }
};
