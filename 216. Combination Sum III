216. Combination Sum III
Medium

Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.

Note:

    All numbers will be positive integers.
    The solution set must not contain duplicate combinations.

Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]

Example 2:

Input: k = 3, n = 9
Output: [[1,2,6], [1,3,5], [2,3,4]]

class Solution {
public:
    int nG;
    int kG;
    vector<vector<int>> result;
    
    void dfs (vector<int> & nums, vector<int> & path, int index, int sum) { 
        if (sum == nG && path.size() == kG) {
            result.push_back(path);
            return;
        }
        
        if (sum > nG || path.size() > kG) {
            return;
        }
        
        for (int i = index; i < 9; i++) {
            path.emplace_back(nums[i]);
            dfs (nums, path, i+1, sum+nums[i]);
            path.pop_back();
        }
        
        return;
    } 
    
    vector<vector<int>> combinationSum3(int k, int n) {
        // length based pruning of the tree .. 
        
        vector<int> nums (9, 0);
        
        for (int i = 1; i <= 9; i++) {
            nums[i-1] = i;
        }
        
        nG = n;
        kG = k; 
        
        vector<int> path;
        dfs (nums, path, 0, 0);
        return result;
    }
};
