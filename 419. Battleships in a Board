419. Battleships in a Board
Medium
Given an 2D board, count how many battleships are in it. The battleships are represented with 'X's, empty slots are represented with '.'s. You may assume the following rules:

    You receive a valid board, made of only battleships or empty slots.
    Battleships can only be placed horizontally or vertically. In other words, they can only be made of the shape 1xN (1 row, N columns) or Nx1 (N rows, 1 column), where N can be of any size.
    At least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.

Example:

X..X
...X
...X

In the above board there are 2 battleships.

Invalid Example:

...X
XXXX
...X

This is an invalid board that you will not receive - as battleships will always have a cell separating between them.

Follow up:
Could you do it in one-pass, using only O(1) extra memory and without modifying the value of the board?

class Solution {
public:
    int countBattleships(vector<vector<char>>& board) {
        // Can we do a vertical and horizontal scan?? 
       
        // We can bascially use the following logic: 
        
        // Scan each line vertically - If we find a spot with a cross .. 
        // if the prev spot is not cross .. means we are starting a new 
        // ship .. else we are using the old cross to count for this ship.
        // If in the next line find a cross .. if the left has a cross don;t
        // increment the count .. else increment count.
        
        int rows = board.size();
        
        if (!rows)
            return 0;
        
        int cols = board[0].size();
        
        int count = 0;
        
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                if (board[r][c] == 'X') {
                    if (r == 0 && c == 0) {
                        count++;
                        continue;
                    }
                    
                    if (r == 0 && board[r][c-1] == '.') {
                        count++;
                        continue;
                    }
                    
                    if (c == 0 && board[r-1][c] == '.') {
                        count++;
                        continue;
                    }
                    
                    if (r-1 >= 0 && (board[r-1][c] == '.') &&
                        c-1 >= 0 && (board[r][c-1] == '.')) {
                      count++;  
                    }
                }
            }
        }
        
        return count; 
    }
};
