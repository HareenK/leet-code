 958. Check Completeness of a Binary Tree
Medium

Given a binary tree, determine if it is a complete binary tree.

Definition of a complete binary tree from Wikipedia:
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.

 

Example 1:

Input: [1,2,3,4,5,6]
Output: true
Explanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.

Example 2:

Input: [1,2,3,4,5,null,7]
Output: false
Explanation: The node with value 7 isn't as far left as possible.

 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// class Solution {
// public: 
//     int count = 0;
//     long maxTag = 0;
    
//     void dfs (TreeNode * root, long tag) {
//         if (!root)
//             return;
//         count += 1;
//         maxTag = max(maxTag, tag);
        
//         dfs (root->left, 2*tag);
//         dfs (root->right, 2*tag+1);
//         return;
        
//     }
    
//     bool isCompleteTree(TreeNode* root) {
        
//         dfs (root, 1);
//         return count == maxTag;
//     }
// };    

class Solution {
    public: 
    bool isCompleteTree(TreeNode * root) {
        if (root == NULL) {
            return true;
        }
        
        queue<TreeNode *> q; 
        bool nullNodeFound = false;
        
        q.push(root);
        
        while (!q.empty()) {
            auto curr = q.front();
            q.pop();
            
            if (curr == NULL) {
                nullNodeFound = true;
                continue;
            } else if (nullNodeFound) {
                return false;
            }
            
            q.push(curr->left);
            q.push(curr->right);
        }
        return true;
    }
};
   
