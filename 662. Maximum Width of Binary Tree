662. Maximum Width of Binary Tree

Given a binary tree, write a function to get the maximum width of the given tree. The width of a tree is the maximum width among all levels. The binary tree has the same structure as a full binary tree, but some nodes are null.

The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the null nodes between the end-nodes are also counted into the length calculation.

Example 1:

Input: 

           1
         /   \
        3     2
       / \     \  
      5   3     9 

Output: 4
Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).

Example 2:

Input: 

          1
         /  
        3    
       / \       
      5   3     

Output: 2
Explanation: The maximum width existing in the third level with the length 2 (5,3).

Example 3:

Input: 

          1
         / \
        3   2 
       /        
      5      

Output: 2
Explanation: The maximum width existing in the second level with the length 2 (3,2).

Example 4:

Input: 

          1
         / \
        3   2
       /     \  
      5       9 
     /         \
    6           7
Output: 8
Explanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).


Note: Answer will in the range of 32-bit signed integer.
Accepted
59,430
Submissions
148,854

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        // Using the tagging method to know the tag count of a node. 
        // Can I use dfs .. bfs is the best to use. 
        
        if (!root)
            return 0;
        
        queue<pair<TreeNode*,int>> q; // pair of node and tag count. 
        
        q.push({root, 0});
        
        long maxW = 1;
        // long depth = 0;
        while (!q.empty()) {
            int size = q.size();
            long minTag = 0;
            long maxTag = 0;
            for (int i = 0; i < size; i++) {
                auto currPair = q.front();
                q.pop();
                
                
                TreeNode * curr = currPair.first;
                long currTag = currPair.second;
                
                // cout << "curr - " << curr->val << " tag - " << currTag << endl; 
                
                if (i == 0) {
                    minTag = currTag;
                }
                if (i == size-1) {
                    maxTag = currTag;
                }
                if (curr->left)
                    q.push({curr->left, 2*currTag});
                if (curr->right)
                    q.push({curr->right, 2*currTag+1});
            }
            // depth++;
            maxW = max (maxW, maxTag-minTag+1);
        }
         
        return maxW;
        
    }
};

// class Solution {
// public:
//     int widthOfBinaryTree(TreeNode* root) {
//         if(root == nullptr) return 0;
//         queue<pair<TreeNode*, int>> q;
//         q.push({root, 1});
//         long maxi = 0;
//         while(!q.empty()) {
//             long left_most = q.front().second, right_most = left_most;
//             int size = q.size();
//             for(int i = 0; i < size; i++) {
//                 TreeNode* curr = q.front().first;
//                 right_most = q.front().second;
//                 q.pop();
//                 if(curr->left != NULL) q.push({curr->left, 2 * right_most});
//                 if(curr->right != NULL) q.push({curr->right, 2 * right_most + 1});
//             }
//             maxi = max(maxi, right_most - left_most + 1);
//         }
//         return maxi;
//     }
// };
