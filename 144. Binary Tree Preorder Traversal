144. Binary Tree Preorder Traversal
Medium

Given a binary tree, return the preorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,2,3]

Follow up: Recursive solution is trivial, could you do it iteratively?


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        // Stack based solution. 
        
        if (!root)
            return {};
        
        vector<int> result;
        
        stack<TreeNode*> s;
        s.push(root);
        
        while (!s.empty()) {
            auto curr = s.top();
            s.pop();
            result.emplace_back(curr->val);
            if (curr->right) // remember to push in the reverse in the stack. 
                s.push(curr->right);
            if (curr->left)
                s.push(curr->left);
        }
        return result;
    }
};
