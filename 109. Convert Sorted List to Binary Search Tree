109. Convert Sorted List to Binary Search Tree
Medium

Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted linked list: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5

Accepted
244,848
Submissions
517,625

https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode * recurse (vector<int> & nums, int left, int right) {
        //cout << "left - " << left << " right - " << right << endl;
        if (left > right)
            return NULL;
        
        int mid = left + (right-left)/2;
        
        TreeNode * root = new TreeNode (nums[mid]);
        root->left = recurse (nums, left, mid-1);
        root->right = recurse (nums, mid+1, right);
        return root;
    }
    
    TreeNode* sortedListToBST(ListNode* head) {
        
        ListNode * curr = head;
        vector<int> nums;
        
        while (curr != NULL) {
            nums.emplace_back(curr->val);
            curr = curr->next;
        }
        
        return recurse (nums, 0, nums.size()-1);
    }
};
