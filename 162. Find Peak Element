162. Find Peak Element
Medium

A peak element is an element that is greater than its neighbors.

Given an input array nums, where nums[i] ≠ nums[i+1], find a peak element and return its index.

The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.

You may imagine that nums[-1] = nums[n] = -∞.

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.

Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 1 or 5 
Explanation: Your function can return either index number 1 where the peak element is 2, 
             or index number 5 where the peak element is 6.

Follow up: Your solution should be in logarithmic complexity.
Accepted
358,385
Submissions
831,153

class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        // Interesting usage of binary search. 
        // 
        //  0 1 2 3 4 5 6
        // [1,2,1,3,5,6,4]
        //            l
        //            r
        //            m
        //
        
        int left = 0;
        int right = nums.size()-1;
        // The crux if nums[mid] > nums[mid+1] then there is no way mid can be the final
        // answer. WE EVENTUALLY WANT TO PUT OUR ANSWER IN MID. 
        // THERE ARE TWO VARIATIONS TO THE PROBLEM: 
        // One when the solution will be in mid and one where it will be in left. 
        // right is mid because right could still be a position where we see a peak. 
        // 
        while (left < right) {
            int mid = left + (right-left)/2;
            if (nums[mid] < nums[mid+1]) {
                left = mid+1;
            } else {
                right = mid;
            }
        }
        return left; 
    }
};
