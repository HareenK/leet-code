https://leetcode.com/problems/fraction-to-recurring-decimal/

Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.

If the fractional part is repeating, enclose the repeating part in parentheses.

If multiple answers are possible, just return any of them.

Example 1:

Input: numerator = 1, denominator = 2
Output: "0.5"

Example 2:

Input: numerator = 2, denominator = 1
Output: "2"

Example 3:

Input: numerator = 2, denominator = 3
Output: "0.(6)"

class Solution {
public:
    string fractionToDecimal(int num, int den) {
        // how do we know ahead of time if the fraction parrt will be 
        // recurring or not. 
        
        // keep a hash map of the quotient and reminder. 
        
        // 2/3 -- > quotient == 0 ... add zero to remainder and redo calculation. 
        
        // 348/5 -> 
    
        if (num == 0)
            return "0";
        
        if (den == 0)
            return "";
        
        if (den == 1) {
            return to_string(num);
        }
        
        if (den == -1) {
            return num < 0 ? to_string (abs((long)num)) : to_string(-num) ; -- 
            // crazy if you take abs(num) it was failing .. since the largest negative on abs'ed will not fit the int. 
        }
        
        bool isNeg = false; 
        
        if (num < 0 && den > 0 || 
            num > 0 && den < 0) {
            isNeg = true;
        }
        
        // if ((num%den) == 0) {
        //     return to_string(num/den);
        // }
        
        num = abs (num);
        den = abs (den);
        
        int whole = (int) (num/den);
        long remainder = num%den;
        
        string result = "";
        
        if (isNeg) {
            result += '-';
        }
        
        result += to_string (whole);
        
        if (remainder != 0) {
            result += ".";
        } else {
            return result;
        }
        
        unordered_map <int,int> map; // --> // key: num, val : where it was last seen.
        
        // superub idea .. claps claps! 
        
        while (true) {
            long num = remainder*10;
            
            if (num == 0)
                return result;
            
            if (map.find(num) != map.end()) {
                // insert a "(" before map[num] and at end. 
                result.insert(map[num],"(");
                // result += to_string(num/den);
                result += ')';
                break;
            } else {
                result += to_string (num/den);
                map[num] = result.size()-1;
                remainder=num%den;
            }
        }
        
        return result; 
    }
};
