32. Longest Valid Parentheses
Hard

Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.

Example 1:

Input: "(()"
Output: 2
Explanation: The longest valid parentheses substring is "()"

Example 2:

Input: ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()"

// class Solution {
// public:
//     int longestValidParentheses(string input) {
//         int left = 0;
//         int right = 0;
        
//         int result = 0;
        
//         for (int i = 0; i < input.size(); i++) {
//             if (input[i] == '(') {
//                 left++;
//             } else if (input[i] == ')') {
//                 right++;
//             }
//             if (left == right) {
//                 result = max (result, 2*left);
//             } else if (right > left) {
//                 left = 0; right = 0;
//             }
//         }
        
//         left = right = 0;
        
//         for (int i = input.size()-1; i >= 0; i--) {
//             if (input[i] == '(') {
//                 left++;
//             } else if (input[i] == ')') {
//                 right++;
//             }
//             if (left == right) {
//                 result = max (result, 2*right);
//             } else if (left > right) {
//                 left = right = 0;
//             }
//         }
        
//         return result;
        
//     }
// };

class Solution {
    public:
    int longestValidParentheses(string input) {
        stack <int> s; 
        s.push (-1);
        
        int result = 0;
        
        for (int i = 0; i < input.size(); i++) {
            if (input[i] == '(') {
                s.push (i); 
            } else {
                s.pop();
                if (s.empty()) {
                    s.push (i);
                } else {
                    result = max (result, i-s.top());
                }
            }
        }
        return result;
    }
};
