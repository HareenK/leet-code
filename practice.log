I am putting this post in place to track the problems I am solving on leetcode. Consistently checkmark if we are hitting these
goals. 

1) Being able to solve 4 problems under 20-30 mins.
2) Being able to solve 4 new problems. 
3) Repetition factor for a problem - can we work on logic diagrams in the head.
4) Eventually need to focus on system design. 

Jan 8th 2020:

2 Medium, New, ~40 mins. 

#####

-- 560. Subarray Sum Equals K
Medium

Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:

Input:nums = [1,1,1], k = 2
Output: 2

Note:

    The length of the array is in range [1, 20,000].
    The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].

-- 394. Decode String
Medium

Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.

Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won't be input like 3a or 2[4].

Examples:

s = "3[a]2[bc]", return "aaabcbc".
s = "3[a2[c]]", return "accaccacc".
s = "2[abc]3[cd]ef", return "abcabccdcdcdef".

3) Minimum Domino Rotation - worked out psuedo code. Comeback.

#####

Jan 9th 2020

Solved 3 M problems from the top facebook questions. 

1) LC# Next permutation - Worked around 4 hrs. Eventual answer was false. Comeback. 

2) LC# Right view of a Binary Tree - Easy question. With the ability to do level-order traversal. 

3) LC# 621: Task Scheduler - Tried to come with a logic. But wasn't able to come with a solution within half and hour. Got
logic in the second 20 mins slot. Wrote answer, but missed one pop condition and had some errors. Fixed it and all pass in 
second try.

Comeback to check best solution.

#####

Jan 10th 2020: 

1) LC 986: Interval List Intersection: Start time - 12:33 PM. Suprisingly struggling with these. Comeback.

2) LC 863: All Nodes Distance K in Binary Tree - 2:30 PM. 3:10 problem still not solved. 
Totally got the signature wrong. We don't have the parent node.

Eventually solved it at 4:10 PM. But made too many errors. CANN'T do this nana. Draw the diagrams - before you work on the
code.

3) LC 34: Find First and Last Position of Element in Sorted Array

Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

4) LC # 438. Find All Anagrams in a String

   A modification of the Robin Karp algorithms. 
   
Jan 11th 2020, Jan 12th 2020:

LC #71 : Simplify Path -- Made a couple of errors. 
Didn't properly append the result string. And didn't take care of checking if the curr will go beyond size. 

LC #351. Android Unlock Patterns
Need bactracking. Lets understand the concept.

LC # Design hit Counter

Jan 18th 2020: 

Domino rotation problem - Tried super optimizing it. But simpler solution worked.

Find first and last index with the target value. Binary search followed by linear scan to the left and right to find the 
end indexes. 

Jan 22th 2020: 

LC Koko Bananas : Binary search of what would be the best rate. 
LC Combination sum : Backtracking.

Jan 26th 2020:   

LC 343: Integer Break: https://leetcode.com/problems/integer-break/

Dynamic Programming .. got to the solution. But missed a part where the max product of a number can be found
without spliting it.



 






