https://leetcode.com/problems/jump-game-ii/

45. Jump Game II
Hard

Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

Example:

Input: [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2.
    Jump 1 step from index 0 to 1, then 3 steps to the last index.

// class Solution {
// public:
//     int jump(vector<int>& nums) {
//         // [2,3,1,1,4]
//         // Calculate the minimum number of steps needed to reach that pos.
        
//         int size = nums.size();
        
//         vector<int>  dp (size, INT_MAX);
        
//         dp [0] = 0;
        
//         for (int i = 1; i < size; i++) {
//             int minL = INT_MAX;
//             for (int j = 0; j < i; j++) {
//                 if (dp[j] != INT_MAX) {
//                     if (nums[j] + j >= i) {
//                         minL = min (minL, dp[j]+1);
//                     }
//                 }
//             }
//             dp[i] = minL;
//         }
        
// //         for (auto & elem : dp) {
// //             cout <<  elem << " ";
// //         }
        
// //         cout << endl;
        
//         return dp[size-1];
//     }
// };

// Another way to do this is update the foward reference of jumps. 

// class Solution {
//     public: 
//     int jump (vector<int> & nums) {
        
//         int size = nums.size();
//         vector<int> dp (size, INT_MAX);
        
//         dp[0] = 0;
        
//         for (int i = 0; i < size; i++) {
//             if (dp[i] != INT_MAX) {
//                 for (int j = i+1; j <= i+nums[i] && j < size; j++) {
//                     dp[j] = min (dp[j], dp[i]+1);
//                 }
//             }
//         }
        
// //         for (auto & elem : dp) {
// //             cout << elem <<  " ";
// //         }
        
// //         cout << endl;
        
//         return dp[size-1];
//     }
// };

class Solution {
  public:
  int jump(vector<int>& nums) {
    int n = nums.size();
    if (n < 2) return 0;

    // max position one could reach 
    // starting from index <= i 
    int maxPos = nums[0];
    // max number of steps one could do
    // inside this jump
    int maxSteps = nums[0];
    
    int jumps = 1;
    for (int i = 1; i < n; ++i) {
      // if to reach this point 
      // one needs one more jump
      if (i > maxSteps) {
        ++jumps;
        maxSteps = maxPos;
      }
      maxPos = max(maxPos, nums[i] + i);
    }
    return jumps;
  }
};
