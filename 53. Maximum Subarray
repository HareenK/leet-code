53. Maximum Subarray
Easy

Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.


// class Solution {
// public:
//     int maxSubArray(vector<int>& nums) {
//         // Practice all dp problem from EOP ...
//         //int sum = 0; int max_sum = INT_MIN; int min_sum = INT_MAX;
        
//         int size = nums.size();
        
//         if (size == 0) return 0;
        
//         int maxSum = nums[0];
        
//         for (int i = 1; i < size; i++) {
//             if (nums[i-1] > 0) nums[i] += nums[i-1];
//             maxSum = max(nums[i], maxSum);
//             //cout  << "max Sum - " << maxSum << endl;
//         }
        
//         //for (auto e : nums) {
//         //    cout << "### sum - " << e << endl;
//         //}
        
//         return maxSum;
        
//     }
// };

// Kadane's Algorithm. 

class Solution {
    public: 
    int maxSubArray (vector<int> & nums) {
        int size = nums.size();
        
        if (size == 0)
            return 0;
        
        int maxSum = nums[0];
        int lastSum = nums[0];
        
        for (int i = 1; i < size; i++) {
            if (lastSum > 0) {
                lastSum += nums[i];
            } else {
                
                // If the lastSum is negative .. 
                // If the current num is negative:
                // adding it to the lastSum will make the sum further negative and therefore,
                // the max will be just considering the current num. 
                // If the current num is positive: 
                // Any negative num added to the positive sum will be less than the positive 
                // number and therefore we can just pick the positive number. 
                
                lastSum = nums[i]; 
                
            }
            
            maxSum = max (lastSum, maxSum);
        }
        
        return maxSum;
    }
};
