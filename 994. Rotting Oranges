https://leetcode.com/problems/rotting-oranges/

994. Rotting Oranges
Medium

In a given grid, each cell can have one of three values:

    the value 0 representing an empty cell;
    the value 1 representing a fresh orange;
    the value 2 representing a rotten orange.

Every minute, any fresh orange that is adjacent (4-directionally) to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange.  If this is impossible, return -1 instead.

 

Example 1:

Input: [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

Example 2:

Input: [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation:  The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.

Example 3:

Input: [[0,2]]
Output: 0
Explanation:  Since there are already no fresh oranges at minute 0, the answer is just 0.

 

Note:

    1 <= grid.length <= 10
    1 <= grid[0].length <= 10
    grid[i][j] is only 0, 1, or 2.

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        // Keep a count of the level you are done with .. the level represents
        // the number of days that have passed. 
        
        int days = 0;
        
        int rows = grid.size();
        
        if (!rows)
            return 0;
        
        int cols = grid[0].size();
        
        queue<pair<int,int>> q;
        
        int fresh = 0, rotten = 0;
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                if (grid[r][c] == 2) {
                    q.push ({r,c});
                } else if (grid[r][c] == 1) {
                    fresh++;
                }
            }
        }
        
        if (fresh == 0) { 
            // If there are no fresh oranges .. are task is complete to begin with.
            // Return 0. 
            return 0;
        }
        
        vector<int> dirs = {0,1,0,-1,0};
        
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                auto & c = q.front();
                int cr = c.first;
                int cc = c.second;
                q.pop();
            
                for (int dir = 0; dir < 4; dir++) {
                    int nr = cr+dirs[dir]; int nc = cc+dirs[dir+1];
                    if (nr >= 0 && nr < rows &&
                        nc >= 0 && nc < cols &&
                        grid[nr][nc] == 1) {
                        grid[nr][nc] = 2;
                        rotten++;
                        q.push({nr,nc});
                    }
                }
            }
            days++;
            if (fresh == rotten) return days; 
            // Important set of line. Once you are done with all fresh ones .. bail out. 
            
        }
        return -1; // If we have reached here .. fresh != rotten .. return -1.
        
    }
};
