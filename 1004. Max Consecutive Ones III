https://leetcode.com/problems/max-consecutive-ones-iii/submissions/

1004. Max Consecutive Ones III
Medium

Given an array A of 0s and 1s, we may change up to K values from 0 to 1.

Return the length of the longest (contiguous) subarray that contains only 1s. 

 

Example 1:

Input: A = [1,1,1,0,0,0,1,1,1,1,0], K = 2
Output: 6
Explanation: 
[1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1.  The longest subarray is underlined.

Example 2:

Input: A = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3
Output: 10
Explanation: 
[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1.  The longest subarray is underlined.


class Solution {
public:
    int longestOnes(vector<int>& A, int K) {
        
        // We need to find the length of each 
        // [1,1,1,0,0,0,1,1,1,1,0]
    
        // This is similar to our left and right method. 
        // Keep exanding until you can find K zeros. 
        // Here comes the optimization - 
        // If the current left is 0 then we'll loose a 0 if the
        // move left by 1 .. increment K by 1. 
        // Now we already have left at the start of where we want to
        // start the second search. If right is 0 .. we end moving left by 1 unit. 
        // Bit complicated. The shrinking on the left works much easierly. 
        
        int left = 0;
        int right;
        
        for (right = 0; right < A.size(); right++) {
            if (A[right] == 0) K--;
            if (K < 0) {
                if (A[left] == 0) {
                    K++;
                }
                left++;
            }
        }
        
        return right-left;
        
    }
};
