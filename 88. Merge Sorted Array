88. Merge Sorted Array
Easy

Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

    The number of elements initialized in nums1 and nums2 are m and n respectively.
    You may assume that nums1 has enough space (size that is equal to m + n) to hold additional elements from nums2.

Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]

Constraints:

    -10^9 <= nums1[i], nums2[i] <= 10^9
    nums1.length == m + n
    nums2.length == n

class Solution {
public:
    void merge(vector<int>& nums1, int m, 
               vector<int>& nums2, int n) {
        // Keep two pointers one for m on for n. And keep filling from the back.
        
        int one = m-1;
        int two = n-1;
        
        int curr = nums1.size()-1;
        
        while (two >= 0) {
            int num1 = one >= 0 ? nums1[one] : INT_MIN; // Interesting case to handle. 
            if (nums2[two] > num1) {
                nums1[curr] = nums2[two];
                two--; curr--;
            } else {
                nums1[curr] = num1;
                one--; curr--;
            }
        }
        return;
    }
};

class Solution {
public:
    void merge(vector<int>& nums1, int m, 
               vector<int>& nums2, int n) {
    
        
        if (nums1.size() != m+n)
            return;

        int oneIndex = m-1;
        int twoIndex = n-1;
        
        for (int curr = m+n-1; curr >= 0; curr--) {
            if (twoIndex < 0)
                break;
            if (oneIndex >= 0 && nums1[oneIndex] > nums2[twoIndex]) { // Important Line. 
                swap (nums1[curr], nums1[oneIndex]);
                oneIndex--;
            } else {
                nums1[curr] = nums2[twoIndex];
                twoIndex--;
            }
        }
        return;
    }
};
