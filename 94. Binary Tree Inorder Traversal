Given a binary tree, return the inorder traversal of its nodes' values.

Example:

Input: [1,null,2,3]
   1
    \
     2
    /
   3

Output: [1,3,2]

Follow up: Recursive solution is trivial, could you do it iteratively?


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

// class Solution {
// public:
//     vector<int> inorderTraversal(TreeNode* root) {
//         // Can we use a stack. Push the elements in the following order. 
//         // right should be processed later than curr which later than left. 
        
//         if (root == NULL) {
//             return {};
//         }
        
//         vector<int> result = {};
        
//         unordered_set<TreeNode*> map;
        
//         stack <TreeNode *> s;
        
//         s.push(root);
        
//         while (!s.empty()) {
//             auto curr = s.top();
//             s.pop();
//             if (map.find(curr) == map.end()) {
//                 map.insert(curr);
//                 if (curr->right) {
//                     s.push(curr->right);
//                 }
//                 s.push(curr);
                
//                 if (curr->left) {
//                     s.push(curr->left);
//                 }
//             } else {
//                 result.emplace_back(curr->val);
//             }
//         }
//         return result;
//     }
// };

class Solution {
    public: 
    vector<int> inorderTraversal (TreeNode * root) {
        // Crux is use a stack to keep all the left nodes that have been traversed to get to 
        // the current node and then pop them. 
        
        if (!root)
            return {};
        
        TreeNode * curr = NULL;
        stack<TreeNode *> s;
        vector<int> result;
        curr = root;
        while (curr != NULL || !s.empty()) {
            while (curr != NULL) {
                s.push(curr);
                curr = curr->left;
            }
            curr = s.top();
            s.pop();
            result.emplace_back(curr->val);
            curr = curr->right;
        }
        
        return result;
        
    }
};
