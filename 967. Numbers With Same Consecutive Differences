https://leetcode.com/problems/numbers-with-same-consecutive-differences/

Return all non-negative integers of length N such that the absolute difference between every two consecutive digits is K.

Note that every number in the answer must not have leading zeros except for the number 0 itself. For example, 01 has one leading zero and is invalid, but 0 is valid.

You may return the answer in any order.

 

Example 1:

Input: N = 3, K = 7
Output: [181,292,707,818,929]
Explanation: Note that 070 is not a valid number, because it has leading zeroes.

Example 2:

Input: N = 2, K = 1
Output: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]

class Solution {
public:
    vector<int> results;
    
    void dfs(int total, int prev, int N, int K) {
        if (N == 0) {
            results.push_back(total);
            return;
        }
        
        // For each position .. check the last position and add or sub K to 
        // get the next digit. 
        
        if (prev-K >= 0) {
            dfs (total*10 + prev-K, prev-K, N-1, K);
        }
        if ((prev-K != prev+K) && prev+K <= 9) {
            dfs (total*10 + prev+K, prev+K, N-1, K);
        }
        return;
    }
    
    vector<int> numsSameConsecDiff(int N, int K) {
        // Interesting .. given an N length for the integer size; 
        // return all numbers with consective diff as K. 
        // Have to used recurssion with backtracking.
        
        if (N == 1) {
            for(int i = 0; i < 10; i++) {
                results.push_back(i);
            }
            return results;
        }
        
        for (int i = 1; i <= 9; i++) {
            dfs (i, i, N-1, K);   
        }
        
        return results;
    }
};
