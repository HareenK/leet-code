336. Palindrome Pairs
Hard

Given a list of unique words, find all pairs of distinct indices (i, j) in the given list, so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.

Example 1:

Input: ["abcd","dcba","lls","s","sssll"]
Output: [[0,1],[1,0],[3,2],[2,4]] 
Explanation: The palindromes are ["dcbaabcd","abcddcba","slls","llssssll"]

Example 2:

Input: ["bat","tab","cat"]
Output: [[0,1],[1,0]] 
Explanation: The palindromes are ["battab","tabbat"]

class Solution {
    public:
    class TrieNode {
        public:
        unordered_map<char, TrieNode*> map;
        bool isEnd;
        int index; 
       
        TrieNode () {
            isEnd = false;
            index = -1;
        }
    };
    
    class Trie {
        public:
        TrieNode * root;
        Trie () {
            root = new TrieNode ();
        }
    
        void dfs (TrieNode * root, unordered_set<int> & result, string & path) {
            
            if (root->isEnd) {
                string pathL = path;
                reverse (pathL.begin(), pathL.end());
                if (pathL == path) {
                    result.insert (root->index);   
                }
            }
            
            for (auto & elem : root->map) {
                path += elem.first;
                dfs (elem.second, result, path); 
                path.pop_back();
            }
            
            return; 
            
        }
        
        void search (string word, unordered_set<int> & result) {
            // special search ...
            
            TrieNode * node = root;

            
            for (int i = 0; i < word.size(); i++) {
                            
                if (node->isEnd) {
                    string sub = word.substr(i);
                    string rev = sub;
                    reverse(rev.begin(), rev.end());
                    if (rev == sub)
                        result.insert(node->index);
                }
                
                char c = word[i];
                if (node->map.find(c) != node->map.end()) {
                    node = node->map[c];
                } else {
                    return;
                }
            }
            
            // If we haven't reached the end .. check if the left out part is a palindrome. 
            
            // Do DFS --- 
            
            string path = "";
            dfs (node, result, path);
            
            return;
        }
        
        void insert (string word, int index) {
            TrieNode * node = root;
            for (auto & c : word) {
                if (node->map.find(c) == node->map.end()) {
                    node->map[c] = new TrieNode ();
                }
                node = node->map[c];
            }
            node->isEnd = true;
            node->index = index; 
            return;
        } 
    };
    
    TrieNode * root; 
    
    vector<vector<int>> palindromePairs(vector<string>& words) {
        // Using a trie??
        // Reverse all the strings and add them to the tree. 
        // Once you add them check for each string .. for the
        // following two conditions: 
        // If we have reach the isLast == true it means we have found, 
        // the a palindrome. 
        // If we haven't reached the isLast == true. For each next node if it 
        // isLast check if the extra suffix is palindrome .. if so add the indexes. 
        // Else move on till we reach end. 
        // Keep a context of the index in the trie for all nodes when it reaches isLast == true. 
        
        vector<vector<int>> results;
        
        Trie trie = Trie();
        
        int size = words.size();
        
        for (int i = 0; i < size; i++) {
            string rev = words[i];
            reverse (rev.begin(), rev.end());
            trie.insert(rev, i);    
        }    
    
        for (int i = 0; i < size; i++) {
            unordered_set<int> result;
            trie.search(words[i], result);
            for (auto & j : result) {
                if (i != j)
                    results.push_back ({i,j});
            }
        }
    
        return results;
    }
};

class Solution {
    public:
    class TrieNode {
        public:
        unordered_map<char, TrieNode*> map;
        bool isEnd;
        int index; 
       
        TrieNode () {
            isEnd = false;
            index = -1;
        }
    };
    
    class Trie {
        public:
        TrieNode * root;
        Trie () {
            root = new TrieNode ();
        }
    
        void dfs (TrieNode * root, unordered_set<int> & result, string & path) {
            
            if (root->isEnd) {
                string pathL = path;
                reverse (pathL.begin(), pathL.end());
                if (pathL == path) {
                    result.insert (root->index);   
                    // result[root->index] = 1;
                }
            }
            
            for (auto & elem : root->map) {
                path += elem.first;
                dfs (elem.second, result, path); 
                path.pop_back();
            }
            
            return; 
            
        }
        
        void search (string word, unordered_set<int> & result) {
            // special search ...
            
            TrieNode * node = root;

            
            for (int i = 0; i < word.size(); i++) {
                            
                if (node->isEnd) {
                    string sub = word.substr(i);
                    string rev = sub;
                    reverse(rev.begin(), rev.end());
                    if (rev == sub)
                        result.insert(node->index);
                        // result[node->index] = 1;    
                }
                
                char c = word[i];
                if (node->map.find(c) != node->map.end()) {
                    node = node->map[c];
                } else {
                    return;
                }
            }
            
            // If we haven't reached the end .. check if the left out part is a palindrome. 
            
            // Do DFS --- 
            
            string path = "";
            dfs (node, result, path);
            
            return;
        }
        
        void insert (string & word, int index) {
            TrieNode * node = root;
            for (auto & c : word) {
                if (node->map.find(c) == node->map.end()) {
                    node->map[c] = new TrieNode ();
                }
                node = node->map[c];
            }
            node->isEnd = true;
            node->index = index; 
            return;
        } 
    };
    
    TrieNode * root; 
    
    vector<vector<int>> palindromePairs(vector<string>& words) {
        // Using a trie??
        // Reverse all the strings and add them to the tree. 
        // Once you add them check for each string .. for the
        // following two conditions: 
        // If we have reach the isLast == true it means we have found, 
        // the a palindrome. 
        // If we haven't reached the isLast == true. For each next node if it 
        // isLast check if the extra suffix is palindrome .. if so add the indexes. 
        // Else move on till we reach end. 
        // Keep a context of the index in the trie for all nodes when it reaches isLast == true. 
        
        vector<vector<int>> results;
        
        Trie trie = Trie();
        
        int size = words.size();
        
        for (int i = 0; i < size; i++) {
            // string rev = words[i];
            reverse(words[i].begin(), words[i].end());
            // reverse (rev.begin(), rev.end());
            trie.insert(words[i], i);    
            reverse(words[i].begin(), words[i].end());
        }    
    
        for (int i = 0; i < size; i++) {
            unordered_set<int> result;
            // vector<int> result(size, 0);
            trie.search(words[i], result);
            for (auto & j : result) {
                if ((i != j))
                    results.push_back ({i,j});
            }
        }
    
        return results;
    }
};
