358. Rearrange String k Distance Apart
Hard

Given a non-empty string s and an integer k, rearrange the string such that the same characters are at least distance k from each other.

All input strings are given in lowercase letters. If it is not possible to rearrange the string, return an empty string "".

Example 1:

Input: s = "aabbcc", k = 3
Output: "abcabc" 
Explanation: The same letters are at least distance 3 from each other.

Example 2:

Input: s = "aaabc", k = 3
Output: "" 
Explanation: It is not possible to rearrange the string.

Example 3:

Input: s = "aaadbbcc", k = 2
Output: "abacabcd"
Explanation: The same letters are at least distance 2 from each other.


class Solution {
public:
    using Pair = pair<int, char>;
    string rearrangeString(string s, int K) {
        if (K == 0) return s; // no processing needed
        unordered_map<char, int> m;
        for (char c : s) m[c]++;
        priority_queue<Pair> pq;
        for (auto p : m) pq.emplace(p.second, p.first); // (count, char)

        string res;
        while (!pq.empty()) {
            vector<Pair> cache; // store characters we used this round
            // each round, we add K characters to res
            for (int i = 0; i < K; i++) { // Nice max logic .. where in we go in a to add only k element and then re-add the elems used in the end. 
                if (pq.empty()) return ""; // no available characters
                Pair temp = pq.top(); pq.pop(); // (count, char)
                res.push_back(temp.second);
                if (res.size() == s.size()) return res; // done!
                if (--temp.first > 0) cache.push_back(temp);
            }
            for (Pair& p : cache) pq.push(p);
        }
        return ""; // handle empty string.
    }
};
