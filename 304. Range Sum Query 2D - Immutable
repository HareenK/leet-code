304. Range Sum Query 2D - Immutable
Medium

Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).

Range Sum Query 2D
The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), which contains sum = 8.

Example:

Given matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]

sumRegion(2, 1, 4, 3) -> 8
sumRegion(1, 1, 2, 2) -> 11
sumRegion(1, 2, 2, 4) -> 12

Note:

    You may assume that the matrix does not change.
    There are many calls to sumRegion function.
    You may assume that row1 ≤ row2 and col1 ≤ col2.

Accepted
111,538
Submissions
294,908

class NumMatrix {
public:
    vector<vector<int>> rSumRows;
    vector<vector<int>> rSumCols;
    
    NumMatrix(vector<vector<int>>& matrix) {
        int rows = matrix.size();
        
        if (rows == 0)
            return;
       
        int cols = matrix[0].size();
        vector<vector<int>> rSum (rows, vector<int> (cols+1, 0)); // rolling sum across cols per row.
        vector<vector<int>> rSumC (rows+1, vector<int>(cols, 0)); // rolling sum across rows per col.
         
        rows = rSum.size();
        cols = rSum[0].size();
        
        for (int r = 0; r < rows; r++) {
            for (int c = 1; c < cols; c++) {
                rSum[r][c] = rSum[r][c-1] + matrix[r][c-1];
            }
        }
        
        rSumRows = rSum;
        
        rows = rSumC.size();
        cols = rSumC[0].size();
        
        for (int r = 1; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                rSumC[r][c] = rSumC[r-1][c] + matrix[r-1][c];
            }
        }
        
        rSumCols = rSumC;
        // for (auto & row : rSumG) {
        //     for (auto & elem : row) {
        //         cout << elem << " ";
        //     }
        //     cout << endl;
        // }
    }
    
    int sumRegion(int row1, int col1, int row2, int col2) {
        // keep a rolling sum per row, such that we can compute the the squares, 
        // once we have the start and the end index. 
        
        // A rolling sum could have been generated for the cols too.  
        
        
        int sum = 0;
        for (int r = row1; r <= row2; r++) {
            sum += (rSumG[r][col2+1] - rSumG[r][col1]); // stupid mistake. 
        }
        return sum;
        
    }
};

/**
 * Your NumMatrix object will be instantiated and called as such:
 * NumMatrix* obj = new NumMatrix(matrix);
 * int param_1 = obj->sumRegion(row1,col1,row2,col2);
 */
 
 There is a better solution -- of using the dp of the rolling sum from the (0,0) to the index (r,c).


class NumMatrix {
    public:
    vector<vector<int>> dp;
    NumMatrix(vector<vector<int>>& matrix) {
        int rows = matrix.size();
        if (rows == 0) 
            return;
        int cols = matrix[0].size();
        
        dp = vector<vector<int>>(rows+1, vector<int>(cols+1,0));
        for (int r = 1; r < rows+1; r++) {
            for (int c =1; c < cols+1; c++) {
                dp[r][c] = dp[r-1][c] + dp[r][c-1] - dp[r-1][c-1] + matrix[r-1][c-1];
            }
        }
        
    }
    int sumRegion(int row1, int col1, int row2, int col2) {
        return dp[row2+1][col2+1] - dp[row1][col2+1] - dp[row2+1][col1] + dp[row1][col1];
    }
};
