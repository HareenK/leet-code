889. Construct Binary Tree from Preorder and Postorder Traversal

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
 From this video :- https://www.youtube.com/watch?v=5lWJpTEnyow
 
class Solution {
public:
    TreeNode* constructFromPrePost(vector<int>& pre, vector<int>& post) {
         
        int size = pre.size();
        
        if (!size) {
            return NULL;
        }
        
        unordered_map <int, TreeNode*> map;
        unordered_map <int, int> postPos;
        
        for (int i = 0; i < size; i++) {
            postPos[post[i]] = i; 
        }
        
        TreeNode * root = new TreeNode (pre[0]);
        map[pre[0]] = root;
        
        for (int i = 1; i < size; i++) {
            // Search the pre[i] in post .. and search the first elem to the right of 
            // it which is in the map. 
            for (int j = postPos[pre[i]]+1; j < size; j++) {
                if (map.find(post[j]) != map.end()) {
                    TreeNode * curr = map[post[j]];
                    if (curr->left == NULL) {
                        curr->left = new TreeNode (pre[i]);
                        map[pre[i]] = curr->left;
                        break;
                    } else {
                        curr->right = new TreeNode (pre[i]);
                        map[pre[i]] = curr->right;
                        break;
                    }
                }
            }
        }
        return root; 
    }
};
