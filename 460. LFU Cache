460. LFU Cache

Design and implement a data structure for Least Frequently Used (LFU) cache.

Implement the LFUCache class:

    LFUCache(int capacity) Initializes the object with the capacity of the data structure.
    int get(int key) Gets the value of the key if the key exists in the cache. Otherwise, returns -1.
    void put(int key, int value) Sets or inserts the value if the key is not already present. When the cache reaches its capacity, it should invalidate the least frequently used item before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used key would be evicted.

Notice that the number of times an item is used is the number of calls to the get and put functions for that item since it was inserted. This number is set to zero when the item is removed.

Example 1:

Input
["LFUCache", "put", "put", "get", "put", "get", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, 3, null, -1, 3, 4]

Explanation
LFUCache lfu = new LFUCache(2);
lfu.put(1, 1);
lfu.put(2, 2);
lfu.get(1);      // return 1
lfu.put(3, 3);   // evicts key 2
lfu.get(2);      // return -1 (not found)
lfu.get(3);      // return 3
lfu.put(4, 4);   // evicts key 1.
lfu.get(1);      // return -1 (not found)
lfu.get(3);      // return 3
lfu.get(4);      // return 4

Constraints:

    0 <= capacity, key, value <= 104
    At most 105 calls will be made to get and put.

struct Node {
    int key, val, freq;
    Node *prev, *next;
    Node() : prev(nullptr), next(nullptr){};
};

struct List {
    int size;
    Node *head, *tail;
    
    List() : size(0), head(new Node()), tail(new Node()) {
        head->next = tail;
        tail->prev = head;
    }
    
	~List() {
		Node *curr = head;
		while (curr != nullptr) {
			Node *next = curr->next;
			delete curr;
			curr = next;
		}
	}
    
    void add(Node *node) {
        node->next = head->next;
        node->prev = head;
        node->next->prev = node;
        node->prev->next = node;
        ++size;
    }
    
    void remove(Node *node) {
        node->next->prev = node->prev;
        node->prev->next = node->next;
        node->next = nullptr;
        node->prev = nullptr;
        --size;
    }
    
    Node *last() {
        Node *node = tail->prev;
        remove(node);
        return node;
    }
};

class LFUCache {
public:
    LFUCache(int capacity) : Cap(capacity), Mfreq(0) {
    }
    
    ~LFUCache() {
        for (pair<int, List*> p: Lists) {
            delete p.second;
        }
    }
    
    int get(int key) {
        if(Nodes.count(key) == 1) {
            promote(key);
            return Nodes[key]->val;
        }
        return -1;
    }
    
    void put(int key, int value) {
        if (!Cap) return;
        
        if (Nodes.count(key) == 1) {
            promote(key); // Done
            Nodes[key]->val = value;
        } 
        else {
            if (Nodes.size() == Cap) {
                evict(); // Done
            }
            insert(key, value); // Done
        }
    }
    
private:
    int Cap, Mfreq;
    unordered_map<int, List*> Lists;
    unordered_map<int, Node*> Nodes; 
    
    void insert(int key, int value) {
        Mfreq = 1;
        Node *node = new Node();
        node->key = key;
        node->val = value;
        node->freq = Mfreq;
        Nodes[key] = node;
        addToList(Mfreq, node); // Done
    }
    
    void addToList(int freq, Node *node) {
        if (Lists.count(freq) == 0) {
            Lists[freq] = new List();
        }
        Lists[freq]->add(node);
    }
    
    void evict() {
        Node *node = Lists[Mfreq]->last();
        Nodes.erase(node->key);
        delete node;
        removeIfEmpty(Mfreq); // Done
    }
    
    void removeIfEmpty(int freq) {
        if (Lists[Mfreq]->size == 0) {
            List *del = Lists[Mfreq];
            delete del;
            Lists.erase(Mfreq);
            if (freq == Mfreq)
                ++Mfreq;
        }
    }
    
    void promote(int key) {
        Node *node = Nodes[key];
        int freq = node->freq++;
        Lists[freq]->remove(node);
        removeIfEmpty(freq);
        addToList(freq+1, node);
    }
};
