https://leetcode.com/problems/binary-tree-level-order-traversal-ii/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> result;
        if (root == NULL) {
            return result;
        }
        queue<TreeNode*> q;
        q.push(root);
        
        while (!q.empty()) {
            int size = q.size();
            vector<int> level;
            for (int i = 0; i < size; i++) {
                TreeNode* curr = q.front();
                q.pop();
                level.push_back(curr->val);
                if (curr->left) q.push(curr->left);
                if (curr->right) q.push(curr->right);
            }
            result.push_back(level);
        }
        reverse (result.begin(), result.end());
        return result;
    }
};

// class Solution {
// public:
//     vector<vector<int>> levelOrderBottom(TreeNode* root) {
//         std::vector<std::vector<int>> res;
//         if (root == NULL) return res;
//         std::queue<TreeNode*> q;
//         q.push(root);
//         while (!q.empty()) {
//             int levelSize = q.size();
//             std::vector<int> currLevel;
//             for (int i = 0; i < levelSize; i++) {
//                 TreeNode* curr = q.front(); 
//                 q.pop();
//                 currLevel.push_back(curr->val);
//                 if (curr->left) q.push(curr->left);
//                 if (curr->right) q.push(curr->right);
//             }
//             res.push_back(currLevel);
//         }
//         std::reverse(res.begin(), res.end());
//         return res;
//     }
// };
