https://leetcode.com/problems/scramble-string/

87. Scramble String
Hard

Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t

To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t

We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a

We say that "rgtae" is a scrambled string of "great".

Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.

Example 1:

Input: s1 = "great", s2 = "rgeat"
Output: true

Example 2:

Input: s1 = "abcde", s2 = "caebd"
Output: false

// class Solution {
// public:
//     bool isScramble(string s1, string s2) {
        
//         //       [ab cde]           [abc de]
//         // [ab cd e] [ab c de] [ab c de] [a bc de]
        
//         /*               |           
//                      [ab de c]
                         
        
//         */
//         // Scrambling looks like character from the original string sort of stick 
//         // together .. how do youu define together-ness. 
        
//         // Like for gr and there is no way if in a string g and r aren't next to each other
//         // it cann't scrambled version of the original string.
        
        
        
        
        
        
//     }
// };

class Solution {
public:

bool isScramble( string s1, string s2 )
{
	if ( s1.length() != s2.length() )
		return false;
	int len = s1.length();
	if ( s1 == s2 )
		return true;
	int table1[ 26 ] = { 0 }, table2[ 26 ] = { 0 };
	for ( int i = 0 ; i < len ; i ++ )
	{
		table1[ s1[ i ] - 'a' ] ++;
		table2[ s2[ i ] - 'a' ] ++;
	}
	if ( memcmp( table1, table2, 26 * sizeof( int ) ) )
		return false;
	if ( len <= 3 )
		return true;
	for ( int i = 1 ; i < len ; i ++ )
	{
		if ( isScramble( s1.substr( 0, i ), s2.substr( 0, i ) ) &&
			isScramble( s1.substr( i, len - i ), s2.substr( i, len - i ) ) )
			return true;
		if ( isScramble( s1.substr( 0, i ), s2.substr( len - i, i ) ) &&
			isScramble( s1.substr( i, len - i), s2.substr( 0, len - i ) ) )
			return true;
	}
	return false;
}
};
