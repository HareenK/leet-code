687. Longest Univalue Path
Medium

Given the root of a binary tree, return the length of the longest path, where each node in the path has the same value. This path may or may not pass through the root.

The length of the path between two nodes is represented by the number of edges between them.

Example 1:

Input: root = [5,4,5,1,1,5]
Output: 2

Example 2:

Input: root = [1,4,5,4,4,5]
Output: 2

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int maxG = 0;
    
    int recurse (TreeNode * root) {
        if (root == NULL)
            return 0;
        
        // if (root->left == NULL && root->right == NULL) {
        //     return 1;
        // }
        
        int left = recurse (root->left);
        int right = recurse (root->right);
        
        if (root->left != NULL && root->left->val != root->val) {
            left = 0;
        }
        
        if (root->right != NULL && root->right->val != root->val) {
            right = 0;
        }
        
        maxG = max (left+right+1, maxG);
        
        return max (left+1, right+1);
    }
    
    int longestUnivaluePath(TreeNode* root) {
        // recurse and see if  we can find longest path. 
        (void) recurse (root);
        return maxG > 0 ? maxG-1 : 0;
    }
};
