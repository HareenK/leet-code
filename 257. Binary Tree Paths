257. Binary Tree Paths

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

void recurse (TreeNode * root, string & path, vector<string> & paths) {
        if (root == NULL) {
            return;
        }
    
        int size = path.size();
    
        path += to_string(root->val);
    
        if (root->left == NULL && root->right == NULL) {
            paths.emplace_back(path);
        }
        path += "->";
        if (root->left != NULL)
            recurse(root->left, path, paths);
        if (root->right != NULL)
            recurse(root->right, path, paths);
        
        path = path.substr(0,size);
        return; 
}

class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root) {
        // use recursion and keep adding the to the string all new elements 
        // encountered.
        
        string path = "";
        vector<string> paths = {}; 
        
        recurse (root, path, paths);
        
        return paths;
    }
};
