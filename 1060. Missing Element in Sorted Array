1060. Missing Element in Sorted Array

1060. Missing Element in Sorted Array
Medium

Given a sorted array A of unique numbers, find the K-th missing number starting from the leftmost number of the array.

 

Example 1:

Input: A = [4,7,9,10], K = 1
Output: 5
Explanation: 
The first missing number is 5.

Example 2:

Input: A = [4,7,9,10], K = 3
Output: 8
Explanation: 
The missing numbers are [5,6,8,...], hence the third missing number is 8.

Example 3:

Input: A = [1,2,4], K = 3
Output: 6
Explanation: 
The missing numbers are [3,5,6,7,...], hence the third missing number is 6.

 

Note:

    1 <= A.length <= 50000
    1 <= A[i] <= 1e7
    1 <= K <= 1e8

Accepted
28,550
Submissions
52,461

class Solution {
public:
    int missingElement(vector<int>& nums, int k) {
        // Q: 
        // Will the target number be smaller than the largest number?
        // Use index in such a way that 
        
        //  0  1  2  3
        // [4, 7, 9, 10]
        //  0  3  5  6
        // [0  2  3  3 ...  ] in this find the largest index smaller than target k and then we can find the number.
        //     l 
        //  r        
        //  ^
        //  m
        // 
        //  0 1 2
        // [1,2,4]
        // [0,0,1]
        //    l r
        //    m
        
        
        // Can do a binary search where we find the index?
        // Can the numbers be non-negative? Will it matter? 
        
        int size = nums.size();
        
        int left = 0; 
        int right = size-1;
        
        while (left <= right) {
            int mid = left + (right-left)/2;
            int target = nums[mid] - nums[0] - mid;
            if (k > target) {
                left = mid+1;
            } else {
                right = mid-1;
            }
        }
        
        return nums[right] +  (k - (nums[right] - nums[0] - right));
    }
};


// class Solution {
// public:
//     int missingElement(vector<int>& nums, int k) {
//         // Q: 
//         // Will the target number be smaller than the largest number?
//         // Use index in such a way that 
        
//         //  0  1  2  3
//         // [4, 7, 9, 10]
//         //  0  3  5  6
//         // [0  2  3  3 ...  ] in this find the largest index smaller than target k and then we can find the number.
//         //     l 
//         //  r        
//         //  ^
//         //  m
//         // 
//         //  0 1 2
//         // [1,2,4]
//         // [0,0,1]
//         //    l r
//         //    m
        
        
//         // Can do a binary search where we find the index?
//         // Can the numbers be non-negative? Will it matter? 
        
//         // The problem with this is you'll end up having to work with the special case of finding the number for the last 
//         // number. 
        
//         int size = nums.size();
        
//         int left = 0; 
//         int right = size-1;
        
//         while (left < right) {
//             int mid = left + (right-left)/2;
//             int target = nums[mid] - nums[0] - mid;
//             if (k > target) {
//                 left = mid+1;
//             } else {
//                 right = mid;
//             }
//         }
//         // cout << left << endl; 
//         return nums[left-1] +  (k - (nums[left-1] - nums[0] - (left - 1)));
        
//         //return nums[right] +  (k - (nums[right] - nums[0] - right));
//     }
// };
