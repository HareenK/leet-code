338. Counting Bits
Medium

Given a non negative integer number num. For every numbers i in the range 0 ≤ i ≤ num calculate the number of 1's in their binary representation and return them as an array.

Example 1:

Input: 2
Output: [0,1,1]

Example 2:

Input: 5
Output: [0,1,1,2,1,2]

Follow up:

    It is very easy to come up with a solution with run time O(n*sizeof(integer)). But can you do it in linear time O(n) /possibly in a single pass?
    Space complexity should be O(n).
    Can you do it like a boss? Do it without using any builtin function like __builtin_popcount in c++ or in any other language.

class Solution {
public:
    vector<int> countBits(int num) {
        // [0,1,1]
        // num --> 5 [32 16 8 4 2 1]
        //             1  0 0 0 1 0
        // --------  [ 1 2 4 8 16 32 64 128]
        
        // 4 2 1 ... 
        //  00 0
        //  01 1
        //  10 2  
        //  11 3
        // 100 4
        // 101 5
        // 110 6
        // 111 7
        //1000 8
        //1001 9
        
        // Keep tracking of the current power we are traversing. 
        
        if (num == 0)
            return {0};
        
        vector<int> dp (num+1,0); 
        
        int size = (int) log2 (num);
        
        dp[0] = 0;
        dp[1] = 1;
        
        // dp[2] = 1;
        
        for (int i = 1; i <= size; i++) {
            for (int j = 0; j <= pow(2,i)-1; j++) {
                int curr = pow(2,i)+j;
                dp[curr] = 1+dp[j];
                if (curr == num) {
                    return dp;
                }
            }
        }
        return dp;
    }
};
