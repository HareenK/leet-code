297. Serialize and Deserialize Binary Tree
Hard

Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Example: 

You may serialize the following tree:

    1
   / \
  2   3
     / \
    4   5

as "[1,2,3,null,null,4,5]"

Clarification: The above format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.


// class Codec {
// public:

//     // Encodes a tree to a single string.
//     string serialize(TreeNode* root) {
        
//         if (root == NULL) return "[]";
       
//         string result = "";
        
//         queue<TreeNode*> q;
        
//         q.push(root);
        
//         while(!q.empty()) {
//             TreeNode * curr = q.front();
//             q.pop();
//             //cout << curr->val << " left: " << curr->left << "right: " << curr->right << endl;
//             result += curr == nullptr ? "null," : to_string(curr->val) + ",";
//             if (curr != nullptr) {
//                 curr->left == nullptr ? q.push((TreeNode*)nullptr) : q.push(curr->left);
//                 curr->right == nullptr ? q.push((TreeNode*)nullptr) : q.push(curr->right);
//             }
//         }
//         int size = result.size();
//         return "[" + result.substr(0,size-1) + "]";
//     }

//     void CreateTree(vector<string> & tokens, TreeNode * node, int id) {
        
//         int size = tokens.size();
        
//         if (2*id+1 > size-1) {
//             node->left = NULL;
//             node->right = NULL;
//             return;
//         }
        
//         if (tokens[2*id+1] == "null") {
//             node->left = NULL;
//         } else {
//             node->left = new TreeNode(stoi(tokens[2*id+1]));
//             CreateTree(tokens, node->left, 2*id+1);
//         }
        
//         if (tokens[2*id+2] == "null") {
//             node->right = NULL;
//         } else {
//             node->right = new TreeNode(stoi(tokens[2*id+2]));
//             CreateTree(tokens, node->right, 2*id+2);
//         }
//         return;
//     }
    
//     // Decodes your encoded data to tree.
//     TreeNode* deserialize(string data) {
        
//         if (data == "[]") return NULL;
        
//         string list = data.substr(1,data.size()-2);
        
//         vector<string> tokens;
        
//         int start = 0, end = 0;
        
//         do {
//             end = list.find(',', start);
//             //cout << "s: " << start << " e: " << end << endl;
//             if (end == string::npos) break;
//             tokens.emplace_back(list.substr(start,end-start)); // Start position to the length of the end.
//             start = end+1;
//         } while (1);

//         // cout << list << endl;
        
//         TreeNode * root = new TreeNode(stoi(tokens[0]));
        
//         CreateTree(tokens,root,0);
        
//         return root;
//     }
// };


class Codec {
    public: 
    
    void dfsSerialize(TreeNode * root, string & result) {
        if (root == NULL) {
            result += "null,";
            return;
        }
        
        result = result + to_string(root->val) + ",";
        
        dfsSerialize(root->left, result);
        dfsSerialize(root->right, result);
        
        return;
    }
    
    string serialize(TreeNode * root) {
        string result = "";
        dfsSerialize (root, result);
        return result;
    }
    
    TreeNode* dfsDeserialize (vector<string> & data, int * index) {
        if (data[*index] == "null") {
            return NULL;
        }
        
        TreeNode * root = new TreeNode(atoi(data[*index].c_str()));
        *index += 1;
        root->left = dfsDeserialize(data, index);
        *index += 1;
        root->right = dfsDeserialize(data, index);
        
        return root;
    }
    
    TreeNode * deserialize (string data) {
        istringstream ss(data);
        string token;
        
        vector<string> stringData; 
        
        while (getline (ss, token, ',')) {
            stringData.emplace_back(token);
        }
        int index = 0;
        TreeNode * root  = dfsDeserialize(stringData, &index);
        
        return root;
        
    }
};
