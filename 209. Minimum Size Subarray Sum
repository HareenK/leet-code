209. Minimum Size Subarray Sum
Medium

Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

Example: 

Input: s = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: the subarray [4,3] has the minimal length under the problem constraint.

Follow up:
If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n). 

class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        // Keep a left and right pointer. 
        // Keep expanding left until we go above sum,
        // then shrink from the left .. till sum falls below. 
        
        int size = nums.size();
        
        if (size == 0)
            return 0;
        
        int left = 0; // lost some time thinking we can make left = 0 and start right at 1. 
                      // Wasn't worth it.  
        int sum = 0;
        
        int result = INT_MAX; // Inited result = 0 .. blunder my bouy blunder. 
        
        for (int right = 0; right < nums.size(); right++) {
            sum += nums[right];
            
            while (sum >= target) { // Blunder on this line. How did say we wanted it as >= 0.
                if (right - left + 1 < result) {
                    result = right-left+1;
                }
                sum -= nums[left];
                left++;
            }   
        }
        
        return result == INT_MAX ? 0 : result;
        
    }
};
