1249. Minimum Remove to Make Valid Parentheses
Medium

Given a string s of '(' , ')' and lowercase English characters. 

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

    It is the empty string, contains only lowercase characters, or
    It can be written as AB (A concatenated with B), where A and B are valid strings, or
    It can be written as (A), where A is a valid string.

 

Example 1:

Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.

Example 2:

Input: s = "a)b(c)d"
Output: "ab(c)d"

Example 3:

Input: s = "))(("
Output: ""
Explanation: An empty string is also valid.

Example 4:

Input: s = "(a(b(c)d)"
Output: "a(b(c)d)"

 

Constraints:

    1 <= s.length <= 10^5
    s[i] is one of  '(' , ')' and lowercase English letters.

Accepted
63,517
Submissions
102,568

/*
class Solution {
public:
    string minRemoveToMakeValid(string s) {
        // Cases: 
        // )))))((
        
        string result = "";
        
        int open = 0;
        int close = 0;
        int completed = -1;
        
        for (int i = 0; i < s.size(); i++) {
            char c = s[i];
            if (c == '(') 
                open++;
            if (c == ')')
                close++;
            
            if (close == open) {
                completed = i; // keep a context from where the open brackets have to be removed. 
            }
            if (close <= open) {
                result += c;
            } else {
                close--;
            }
        }
        
        // cout << result << " " << completed;
        
       
        // Remove the open brackets from the beginning.
        int i = 0;
        string prefix = "";
        while (open > close) {
            if (result[i] != '(') {
                prefix += result[i];
                open--;
            }
            i++;
        }
            
        result = prefix + 
            
        return result;
        
    }
};
*/

string validateString (string s, char open, char close) {
    
    string result = "";
    int balance = 0;
    
    for (auto & c : s) {
        if (c == open)
            balance++;
        if (c == close) {
            if (balance == 0) {
                continue;
            } else {
                balance--;
            }
        }   
        result += c;   
    }
    return result;
}

class Solution {
    public:
        string minRemoveToMakeValid(string s) {
            string result = "";
            result = validateString(s, '(',')');
            reverse(result.begin(), result.end());
            result = validateString(result, ')', '(');
            reverse(result.begin(), result.end());
            return result;
        }
};
