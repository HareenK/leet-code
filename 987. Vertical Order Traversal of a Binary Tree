987. Vertical Order Traversal of a Binary Tree

Given a binary tree, return the vertical order traversal of its nodes values.

For each node at position (X, Y), its left and right children respectively will be at positions (X-1, Y-1) and (X+1, Y-1).

Running a vertical line from X = -infinity to X = +infinity, whenever the vertical line touches some nodes, we report the values of the nodes in order from top to bottom (decreasing Y coordinates).

If two nodes have the same position, then the value of the node that is reported first is the value that is smaller.

Return an list of non-empty reports in order of X coordinate.  Every report will have a list of values of nodes.

Example 1:

Input: [3,9,20,null,null,15,7]
Output: [[9],[3,15],[20],[7]]
Explanation: 
Without loss of generality, we can assume the root node is at position (0, 0):
Then, the node with value 9 occurs at position (-1, -1);
The nodes with values 3 and 15 occur at positions (0, 0) and (0, -2);
The node with value 20 occurs at position (1, -1);
The node with value 7 occurs at position (2, -2).

Example 2:

Input: [1,2,3,4,5,6,7]
Output: [[4],[2],[1,5,6],[3],[7]]
Explanation: 
The node with value 5 and the node with value 6 have the same position according to the given scheme.
However, in the report "[1,5,6]", the node value of 5 comes first since 5 is smaller than 6.

Note:

    The tree will have between 1 and 1000 nodes.
    Each node's value will be between 0 and 1000.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        
        // Try doing the bfs traversal ... 
        
        if (!root)
            return {};
        
        unordered_map <int, vector<int>> map; 
        
        queue <pair <TreeNode*, int>> q; // need a pair of pair to keep row
        
        q.push ({root, 0});
        
        int minLeft = 0;
        int maxRight = 0;
        
        while (!q.empty()) {
            int size = q.size();
            
            vector<pair<int,int>> level; // col, val
            
            for (int i = 0; i < size; i++) {
                auto c = q.front();
                q.pop();
                TreeNode * curr = c.first;
                int col = c.second;

                minLeft = min (minLeft, col);
                maxRight = max (maxRight, col);

                // if (map.find(col) != map.end()) {
                //     map[col].emplace_back(curr->val);
                // } else {
                //     map[col] = {curr->val};
                // }

                level.push_back({col, curr->val});

                if (curr->left)
                    q.push ({curr->left, col-1});
                
                if (curr->right)
                    q.push({curr->right, col+1});
            }
            
            sort (level.begin(), level.end(), [] (pair<int,int> & a, pair<int,int> & b) {
                 if (a.first == b.first) {
                     return a.second < b.second;
                 } else {
                    return a.first < b.first;   
                 }
            });
            
            for (pair<int,int> & elem : level) {
                if (map.find(elem.first) != map.end()) {
                    map[elem.first].emplace_back(elem.second);
                } else {
                    map[elem.first] = {elem.second};
                }
            }
        }
        
        vector<vector<int>> results = {};
        
        for (int i = minLeft; i <= maxRight; i++) {
            results.push_back({});
            for (auto & e : map[i]) {
                results[results.size()-1].emplace_back(e);
            }
        }
        
        return results;
        
    }
};
