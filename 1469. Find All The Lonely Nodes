1469. Find All The Lonely Nodes

In a binary tree, a lonely node is a node that is the only child of its parent node. 
The root of the tree is not lonely because it does not have a parent node.

Given the root of a binary tree, return an array containing the values of all lonely nodes in the tree. Return the list in any order.

Example 1:

Input: root = [1,2,3,null,4]
Output: [4]
Explanation: Light blue node is the only lonely node.
Node 1 is the root and is not lonely.
Nodes 2 and 3 have the same parent and are not lonely.

class Solution {
public:
    
    void recurse (TreeNode * root, vector<int> & result) {
        if (root == NULL)
            return;
        
        if (root->left != NULL && root->right == NULL) {
            result.emplace_back(root->left->val);
        }
        
        if (root->left == NULL && root->right != NULL) {
            result.emplace_back(root->right->val);
        }
        
        recurse (root->left, result);
        recurse (root->right, result);
        
        return; 
    }
    
    vector<int> getLonelyNodes(TreeNode* root) {
        vector<int> result;
        recurse (root, result);
        return result;
    }
};
