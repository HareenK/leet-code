567. Permutation in String
Medium

Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.

 

Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").

Example 2:

Input:s1= "ab" s2 = "eidboaoo"
Output: False

 

Constraints:

    The input strings only contain lower case letters.
    The length of both given strings is in range [1, 10,000].




// The key idea is th window size we have to check has to be of a fixed length. 
// we can do optimization by making vector comparision. 


class Solution {
    public: 
    bool checkInclusion (string s1, string s2) {
        vector<int> s1Count (26, 0);
        vector<int> s2Count (26, 0);
        
        int wndSize = s1.size();
        
        if (s1.size() > s2.size()) {
            return false;
        }
        
        for (int i = 0; i < wndSize; i++) {
            s1Count[s1[i]-'a']++;
            s2Count[s2[i]-'a']++;
        }
         
        if (s1Count == s2Count) {
            return true;
        }
        
        for (int i = 0; i < s2.size()-wndSize; i++) {
            s2Count[s2[i]-'a'] -= 1;
            s2Count[s2[i+wndSize]-'a'] += 1;
            if (s1Count == s2Count) {
                return true;
            }
        }
        return false;
    }
};
