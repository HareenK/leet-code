https://leetcode.com/problems/reverse-linked-list-ii/submissions/

92. Reverse Linked List II
Medium

Reverse a linked list from position m to n. Do it in one-pass.

Note: 1 ≤ m ≤ n ≤ length of list.

Example:

Input: 1->2->3->4->5->NULL, m = 2, n = 4
Output: 1->4->3->2->5->NULL


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode * headG;
    void reverse (ListNode * old_tail, ListNode * current, int m, int n, int count) {
        
        ListNode * prev = NULL;
        ListNode * curr = current;
        ListNode * next = NULL;
        ListNode * new_tail = current;
        
        while (curr != NULL) {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
            count++;
            if (count == n+1) {
                break;
            }
        }
        
        // attach the prev to the old_tail.
        
        if (old_tail != NULL) {
            old_tail->next = prev;
        } else {
            headG = prev; // Important line to return the prev as head if m == 1. 
        }
        
        if (new_tail != NULL) {
            new_tail->next = curr;
        }
        return;
    }
    
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        
        // keep a context of the head and tail where the reversed linked-list 
        // should be attached. 
        
        ListNode * curr = head;

        if (head == NULL) {
            return NULL;
        }
        
        int count = 1;
        
        while (curr != NULL && count < m-1) {
            curr = curr->next;
            count++;
        }
        
        headG = head;
        
        if (m == 1) {
            reverse (NULL,curr, m, n, count); // If m is 1 ... we need to send curr itself.
        } else  {
            reverse (curr , curr->next, m, n, count+1);     
        }

        return headG;
    }
};
