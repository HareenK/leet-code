250. Count Univalue Subtrees

Given the root of a binary tree, return the number of uni-value subtrees.

A uni-value subtree means all nodes of the subtree have the same value.

 

Example 1:


Input: root = [5,1,5,5,5,null,5]
Output: 4
Example 2:

Input: root = []
Output: 0
Example 3:

Input: root = [5,5,5,5,5,null,5]
Output: 6
 

Constraints:

The numbrt of the node in the tree will be in the range [0, 1000].
-1000 <= Node.val <= 1000

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int valG;
    bool recurse (TreeNode * root) {
        if (root == NULL) {
            return true;
        }
        
        bool le = recurse (root->left);
        bool re = recurse (root->right);
        
        bool ll = root->left != NULL ? root->left->val == root->val : true;
        bool rl = root->right != NULL ? root->right->val == root->val : true;
        
        if (le && re && ll && rl) {
            valG += 1;
            return true;
        }
        
        return false;
    }
    
    int countUnivalSubtrees(TreeNode* root) {
        // Do a recursive walk and check if the left and right vals are the same. 
        
        // return a bool val - if the subtree has same value as left and right. 
        
        valG = 0;
        
        recurse (root);
        
        return valG;
    }
};
