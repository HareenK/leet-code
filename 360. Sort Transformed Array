https://leetcode.com/problems/sort-transformed-array/

360. Sort Transformed Array
Medium

Given a sorted array of integers nums and integer values a, b and c. Apply a quadratic function of the form f(x) = ax2 + bx + c to each element x in the array.

The returned array must be in sorted order.

Expected time complexity: O(n)

Example 1:

Input: nums = [-4,-2,2,4], a = 1, b = 3, c = 5
Output: [3,9,15,33]

Example 2:

Input: nums = [-4,-2,2,4], a = -1, b = 3, c = 5
Output: [-23,-5,1,7]

class Solution {

public:
    vector<int> sortTransformedArray(vector<int>& nums, int a, int b, int c) {
        vector<int> res;
        
        if (a == 0) {
            for (int x: nums) res.push_back(b * x + c);
            if (b < 0) reverse(res.begin(), res.end());
            return res;
        }
        
        if (nums.empty()) return res;
        
        double vert = -double(b) / (2 * a); // crazy line .. to find the mid point of 
                                            // the parabola. 
        int l = 0, r = nums.size() - 1;
        
        // merge from the extremes, the most far away from vert always first 
        
        while (l <= r) {
            int x;
            if (abs(nums[l] - vert) > abs(nums[r] - vert)) {
                x = nums[l]; l++;
            } else {
                x = nums[r]; r--;
            }
            res.push_back(a * x * x + b * x + c);
        }
        
        if (a > 0) reverse(res.begin(), res.end());
        
        return res;
    }
};
