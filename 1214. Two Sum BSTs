https://leetcode.com/problems/two-sum-bsts/

1214. Two Sum BSTs
Medium

Given two binary search trees, return True if and only if there is a node in the first tree and a node in the second tree whose values sum up to a given integer target.

Example 1:

Input: root1 = [2,1,4], root2 = [1,0,3], target = 5
Output: true
Explanation: 2 and 3 sum up to 5.

Example 2:

Input: root1 = [0,-10,10], root2 = [5,1,7,0,2], target = 18
Output: false


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    unordered_set <int> map;
    
    void createMap (TreeNode * root) {
        if (root == NULL)
            return;
        
        map.insert(root->val);
        createMap (root->left);
        createMap (root->right);
        return;
    }
    
    bool findTarget (TreeNode * root, int target) {
        if (root == NULL)
            return false;
        if (map.find (target-root->val) != map.end()) {
            return true;
        }
        if (findTarget(root->left, target)) {
            return true;
        }
        if (findTarget(root->right, target)) {
            return true;
        }
        return false;
    }
    
    bool twoSumBSTs(TreeNode* root1, TreeNode* root2, int target) {
        // [2 1 4]
        // [1 0 3]
        
        // Walk the first tree and add all of them to unordered_map .. 
        // Walk the second tree and check if the values are present in the other
        // tree. 
        
        createMap (root1);
        return findTarget (root2, target);
    }
};

// An alternate way would be to have a forward in-order iterator on one tree and
// a reverse iterator 
