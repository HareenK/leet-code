static auto _ = [] () {ios_base::sync_with_stdio(false);cin.tie(nullptr);return 0;}();

// class Solution {
// public:
//     int knightDialer(int N) {
//         // Counting problem -- it is interesting to draw the diagram. 
//         // graph -- 
        
//         int MOD = 1e9+7;
        
//         vector<vector<int>> dp (N+1, vector<int> (10,0)); 
        
//         int rows = dp.size(); // numbers
//         int cols = dp[0].size(); // cols
        
//         for (int c = 0; c < cols; c++) {
//             dp[1][c] = 1;
//         }
        
//         // 0 -> 4,6
//         // 1 -> 6,8
//         // 2 -> 7,9
//         // 3 -> 4,8
//         // 4 -> 0,3,9
//         // 5 -> empty
//         // 6 -> 0,1,7
//         // 7 -> 2,6
//         // 8 -> 1,3
//         // 9 -> 4,2
        
//         vector<vector<int>> graph =  {{4,6},    
//                                       {8,6},
//                                       {7,9},
//                                       {8,4},
//                                       {3,9,0},
//                                       {},
//                                       {1,0,7},
//                                       {6,2},
//                                       {1,3},
//                                       {4,2}};

        
//         for (int r = 2; r < rows; r++) {
//             for (int c = 0; c < cols; c++) {
//                  dp[r][c] = 0; 
//                  for (auto & prev : graph[c]) {
//                      dp[r][c] = (dp[r][c] + dp[r-1][prev])%MOD;
//                  }
//             }
//         }
        
//         // for (auto & row : dp) {
//         //     for (auto & elem : row) {
//         //         cout << elem << " ";
//         //     }
//         //     cout << endl;
//         // }
        
//         int ans = 0;
        
//         for(int j=0;j<10;j++) ans = (ans + dp[N][j]) % MOD; 
                                 
//         return ans;
//     }
// };
// 
// 2-d solution. 

class Solution {
public:
    int mod = 1e9+7;
    int knightDialer(int N) {
        //all possible moves for all positions
        vector<vector<int>> moves = {{4,6},{8,6},{7,9},{8,4},{3,9,0},{},{1,0,7},{6,2},{1,3},{4,2}};
        //O(1) space as we are storing only 20 elements
        vector<vector<int>> dp(2,vector<int>(10,0));
        
        for(int i=0;i<N;i++){
            for(int j=0;j<10;j++){
                if(i==0) dp[1][j]=1;
                else{
                    dp[1][j]=0;
                    for(auto k: moves[j]) dp[1][j] = (dp[1][j] + dp[0][k]) % mod;    
                }
            }
            dp[0] = dp[1];
        }
        
        int ans = 0;
        for(int j=0;j<10;j++) ans = (ans + dp[0][j]) % mod;
        return ans;
    }
};

https://leetcode.com/problems/knight-dialer/discuss/705341/c-easy-solution-with-diagram
