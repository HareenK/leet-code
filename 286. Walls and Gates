286. Walls and Gates
Medium

You are given a m x n 2D grid initialized with these three possible values.

    -1 - A wall or an obstacle.
    0 - A gate.
    INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.

Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

Example: 

Given the 2D grid:

INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF

After running your function, the 2D grid should be:

  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4
  
class Solution {
public:
   // vector<vector<int>> grid;
    void bfs (int r, int c, vector<vector<int>> & grid) {
        
        int rows = grid.size();
        int cols = grid[0].size();
        
        queue<pair<int,int>> q;
        q.push ({r,c});
        
        vector<int> dirs = {0,1,0,-1,0};
        int level = 0;
        // cout << "r - " << r << " c - " << c << endl;
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                auto curr = q.front();
                q.pop();

                // if (level < grid[r][c]) {
                //     grid[r][c] = level;
                // }

                for (int i = 0; i < 4; i++) {
                    int nr = curr.first + dirs[i];
                    int nc = curr.second + dirs[i+1];

                    if (nr >= 0 && nr < rows &&
                        nc >= 0 && nc < cols &&
                        grid[nr][nc] > level+1) {
                        // Doesn't push any 0 elems or -1 elems.
                        // Also if the grid is already reached by a lower
                        // BFS walk we skip pushing that node to the queue. 
                        // cout << "next - " << nr << " " << nc << endl;
                        grid[nr][nc] = level+1;
                        q.push({nr,nc});
                    }
                }
            }
            level++;
        }
        return;
    }
    
    void wallsAndGates(vector<vector<int>>& rooms) {
        
        // Wall and gates ... 
        // The basic approach could be: 
        // Iterate over the grid: 
        //  find a '0' .. 
        
        // If we find a neighbor with INT_MAX change it's value, 
        // to the tree level .. and then continue the bfs walk. 
        // If we find a neighbor value > 0 and if the current level
        // is less than the previous value, continue the bfs. 
        
        int rows = rooms.size();
        
        if (!rows)
            return;
        
        int cols = rooms[0].size();
        
        // grid = rooms; 
        
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (rooms[i][j] == 0) {
                    bfs (i,j, rooms);
                }
            }
        }
        
        return;
        
    }
};

// Boundary sweep works better. 
// Push all the zero nodes in the queue and then expand in all the directions. 
// A node closest to the gate will be already filled. If you find a node 
// with INT_MAX .. it means we haven't reached it in any previous levels. 

class Solution {
    public: 
    void wallsAndGates(vector<vector<int>>& rooms) {
        int rows = rooms.size();
        if (!rows)
            return;
        int cols = rooms[0].size();
        
        queue <pair<int,int>> q; 
        
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                if (rooms[r][c] == 0) { // gates -- 
                    q.push ({r,c});
                }
            }
        }
        
        vector<int> dirs = {0,1,0,-1,0};
        
        int level = 1;
        
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                auto curr = q.front();
                q.pop();

                int cr = curr.first;
                int cc = curr.second;
                
                for (int i = 0; i < 4; i++) {
                    int nr = cr + dirs[i];
                    int nc = cc + dirs[i+1];
                    if (nr >= 0 && nr < rows &&
                        nc >= 0 && nc < cols && 
                        rooms[nr][nc] == INT_MAX) {
                        rooms[nr][nc] = level;
                        q.push ({nr,nc});
                    }
                }
            }
            level++;
        }
        return;
    }
};
