251. Flatten 2D Vector

#### 

Cases:

["Vector2D","hasNext"]
[[[[]]],[null]]

// We are saying nr and nc will be the place where you'll find the next .. 
// therefore when move the nr to a location where we are certain an elem is to be found. 
####


Design and implement an iterator to flatten a 2d vector. It should support the following operations: next and hasNext.

 

Example:

Vector2D iterator = new Vector2D([[1,2],[3],[4]]);

iterator.next(); // return 1
iterator.next(); // return 2
iterator.next(); // return 3
iterator.hasNext(); // return true
iterator.hasNext(); // return true
iterator.next(); // return 4
iterator.hasNext(); // return false

 

Notes:

    Please remember to RESET your class variables declared in Vector2D, as static/class variables are persisted across multiple test cases. Please see here for more details.
    You may assume that next() call will always be valid, that is, there will be at least a next element in the 2d vector when next() is called.


class Vector2D {

public:
    vector<vector<int>> vG;
    int rows;
    int nr, nc;
    Vector2D (vector<vector<int>>& v) {
        rows = v.size();
        nr = 0, nc = 0;
        vG = v;
        // We are saying nr and nc will be the place where you'll find the next .. 
        // therefore when move the nr to a location where we are certain an elem is to be found. 
        while (nr < rows && vG[nr].size() == 0) {
            nr++;
        }
    }
    
    int next() {
        int result = vG[nr][nc];
        
        int cols = vG[nr].size();
        
        // If we have more elements to be
        // processed in this row .. we can move the 
        // col by 1. 
        
        if (nc+1 < cols) {
            nc = nc+1;
            return result; 
        }
        
        nc = 0;
        
        do {
            nr++;
        } while (nr < rows && vG[nr].size() == 0);
            
        return result;
    }
    
    bool hasNext() {
        if (nr == rows)
            return false;
        return true;
    }
};

/**
 * Your Vector2D object will be instantiated and called as such:
 * Vector2D* obj = new Vector2D(v);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
