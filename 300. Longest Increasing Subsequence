300. Longest Increasing Subsequence
Medium

Given an unsorted array of integers, find the length of longest increasing subsequence.

Example:

Input: [10,9,2,5,3,7,101,18]
Output: 4 
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. 

Note:

    There may be more than one LIS combination, it is only necessary for you to return the length.
    Your algorithm should run in O(n2) complexity.

Follow up: Could you improve it to O(n log n) time complexity?
Accepted
370,607
Submissions
874,784

class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int size = nums.size();
        
        if (size == 0)
            return 0;
        
        vector<int> dp (size, 0);
        
        // Monotonically increasing??
        
        dp[0] = 1;
        
        int maxG = dp[0];
        
        for (int i = 1; i < size; i++) {
            int maxL = 0;
            for (int j = 0; j < i; j++) {
                if (nums[j] < nums[i]) {
                    maxL = max(dp[j], maxL);
                } 
            }
            dp[i] = maxL + 1;
            maxG = max (maxG, dp[i]);
        }
        
        
        // for (auto & elem : dp) {
        //     cout << elem << " ";
        // }
        
        return maxG;
        
        
    }
};

////////////~~~~~~~/////////////

class Solution {
public:
    int longestArithSeqLength(vector<int>& nums) {
        // [3,6,9,12] -- 
        // using a dp solution. 
        // for (int num = 0; num < nums; nums++) {
        //      for (int i = )
        // }
        // keep a vector of unordered_map<>
        
        int size = nums.size();
        
        vector<unordered_map<int,int>> dp;
        
        dp.emplace_back(unordered_map<int,int> ({}));
        //cout << dp[0].size() << endl;
        
        int maxG = 0;
        
        for (int i = 1; i < size; i++) {
            dp.emplace_back(unordered_map<int,int> ({}));
            int maxL = 0;
            for (int j = 0; j < i; j++) {
                int diff = nums[j]-nums[i];
                if (dp[j].find(diff) != dp[j].end()) {
                    dp[i][diff] = dp[j][diff] + 1;
                } else {
                    dp[i][diff] = 2;
                }
                maxL = max(maxL, dp[i][diff]);
            }
            maxG = max(maxL,maxG);
        }
        
//         int maxG = 0;
        
//         for (auto & map : dp) {
//             for (auto & elem : map) {
//                 maxG = max(maxG, elem.second);
//             }
//         }
        
        return maxG;
        
    }
};
