Contiguous Array

Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.

Example 1:

Input: [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.

Example 2:

Input: [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.

Note: The length of the given binary array will not exceed 50,000. 

class Solution {
public:
    int findMaxLength(vector<int>& nums) {
        // Keep -1 for 0 and 1 for 1 .. keep a rolling sum and once we have a similar sum, we
        // find the index with the sum. 
        
        unordered_map<int,int> map; 
        
        map[0] = -1;
        
        int rSum = 0;
        
        int result = 0;
        
        for (int i = 0; i < nums.size(); i++) {
            rSum += nums[i] > 0 ? 1 : -1;
            if (map.find(rSum) != map.end()) {
                result = max(result, i - map[rSum]);
            } else {
                map[rSum] = i;
            }
        }
        
        return result;
    }
};
