Cheat sheet - 

c++ header file for STL:

#include<bits/stdc++.h> 

permutation formula - 
combination formula -  

vector constructor -
constructor list: 

speedup things .. 

static auto _ = [] () {ios_base::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr); return 0;}();

## VECTOR APIS ##

accumulate(nums.begin(), nums.end(), 0) --> to accumulate the sum of all the numbers in nums. (TARGET SUM)
max_element (nums.begin(), nums.end()) --> Find the iterator for the element which is the max in a vector. (PANCAKE SORT)

or max ({ .. Range of elems .. })

resize a vector -->  

result.resize(size*resultSize); --> resizes the vector by (size);

for (int k = 1; k < size; k++) {
     copy_n(result.begin(), resultSize, result.begin() + k*(resultSize)); --> copy_n (from, size, to);
}

copy_n () --> 

auto it = max_element (vec.begin(), vec.end()); --> finding pointer to the elem which is the highest in a vector. 

vec.erase(it);


SORT FUNCTION TEMPLATE: 

int findNum (int search, vector<bool> & nums) { // return index.
    int found = 0;
    for (int i = 0; i < nums.size(); i++) {
        if (nums[i] == false) {
            found++;
            if (found == search) {
                return i;
            }
        }
    }
    return -1;
}

// alternative way to find a spot. 
int findSpot (int k, vector<int> & nums) {
     auto iter = nums.begin();
     iter = iter+k-1;
     int result = *iter;
     nums.remove(iter);
     return result;
}


## ##

DFS TEMPLATE: 
        for (int i = 0; i < nums.size(); i++) {
            int local = nums[i];
            curr.emplace_back(local);
            nums.erase(nums.begin()+i); 
            dfs (nums, curr);
            nums.insert(nums.begin()+i, local);
            curr.pop_back();
        }

        return;
    }

## ## 

## GRID DECLARATION AND GRID TRAVERSAL ##

vector<vector<int>> grid(3, vector<>(3,0));

Lookup adjacent elems: 

vector<vector<int>> dirs = {{-1,0}, {1,0}, {0,-1}, {0,1}};

for (auto & dir : dirs) {
                int nr = r+dir[0];
                int nc = c+dir[1];
                if (nr >= 0 && nr < rows && 
                    nc >= 0 && nc < cols &&
                    grid[nr][nc] == 'O')
                    q.push({nr,nc});
            }

Graph directions for a knight on a phone pad. 

        vector<vector<int>> graph =  {{4,6},    
                                      {8,6},
                                      {7,9},
                                      {8,4},
                                      {3,9,0},
                                      {},
                                      {1,0,7},
                                      {6,2},
                                      {1,3},
                                      {4,2}};
            
## SWAP ELEMENTS ##

swap (nums[fromIndex), nums[toIndex]);

## ~~~ ##

Making pairs -- make_pair()

## UTILITY FUNCTIONS ##

abs() .. -> get absolute value.

isalpha to see if a character is an alpbhet. 

https://thispointer.com/c-how-to-compare-two-vectors-stdequal-comparators/ - comparison function on vectors. == is overloaded to compare the content of int arrays. 

int minL = *min_elem(res.begin(), res.end()); // what is returned is an iterator.  

## ~~~ ##

### RANDOM FUNCTION ###

generate seed - srand() - call it only once in the init() and then keep calling the new values. 
generate random numbers - rand().

srand (time(NULL));

rand() --> gives a random positive interger between 0 to INT_MAX -- 

### MOD FUNCTION ###
This mod function works  for when a and b are negative. 
int mod(int a, int b) { --> mod for both negative and positive numbers.
    return (b + (a%b)) % b;
}

### SET APIS ### 
1) cleanup all elements in a set:
    set.erase(set.begin(), set.end()); 
2) find if an element is in a set: 
    set.count(num) > 0

### QUEUE APIS ###

q.push() --> insert an element. or q.emplace() --> If you are using a queue<pair<int,int>> -- you could just say q.emplace(i,j); instead of saying q.push(make_pair(i,j));
q.front() --> peek the front element.
q.pop() --> Remove the front element.

~~~~ PATTERNS ~~~~ 

## Level order traversal ##

queue<int> q; 
q.push(elem);

while (q.empty()) {
    int size = q.size();
    for (int i = 0; i < size; i++) {
        auto & curr = q.front();
        curr.pop()
        
        // Do something with curr.
        // Add new element based on wheather question is grid or tree.
        
    }
}

// Removing adding an element to set for bfs. 
void recurse (vector<int> & nums, vector<int> & result) {
        if (nums.size() == 0) {
            results.emplace_back(result);
            return;
        }
        
        for (int i = 0; i < nums.size(); i++) {
            int local = nums[i];
            result.emplace_back(local);
            auto iter = nums.begin()+i;
            nums.erase(iter);
            recurse (nums, result);
            result.pop_back();
            nums.insert(nums.begin()+i, local);
        }
        
    }

## ##

## Processing unequal length strings or linked-list ## 

## ##

## STRING APIS ##

to_string() --> convert an integer value to string. 
string.substr(int startindex, int len) --> get a substring of type string.

if len is not passed .. substr will give substring until the end. 
stringstream .. given a string string with demarcators the stream splits it and gives us the individual line. 

compare 2 strings -- 
a.compare(b) == 0 --> implies the two strings are the same. 
Compare two strings from certain position in string a to certain position in b. 

a.compare(start_pos_a, length_in_a, b, start_pos_b, length_in_b);

## finding all occurences of a words in a string ##

for (auto & word : dict) {
            
            int pos = 0;
            
            do {
                pos = s.find (word, pos);
                
                if (pos != npos) {
                    results.emplace_back ({pos, pos+word.size()-1});
                }
                
            } while (pos != npos);

convert string to int --
stoi(str);

# BIT APIS #

cout << bitset<8>(x) << endl; --> prints the number in bit representation. 

# Declaring big constants # 

int MOD = 10e9+7 // 1000,000,000 + 7.
#define MOD 1000000007
# ~~ #

# UNORDERED_MAP # #HASH#

unordered_map : delete - erase()

# TOGGLE BIT # 

toggle ^= 1;

#####

#PALINDROME CENTERS AND INDEXES#

for (int center = 0; center < centers; center++) {
            int left = center/2;
            int right = left + center%2;
            
            while (left >= 0 && right < s.size() && s[left] == s[right]) {
                count++;
                left--;
                right++;
            }
 
# PRIORITY QUEUE APIS #

Priority queue with custom comparator function -- 

priority_queue <pair<int, double>, vector<pair<int, double>>, 
            function<bool(pair<int,double>, pair<int,double>)>> pq (
            [](pair<int, double> & a, pair<int, double> & b) -> bool {
                return a.second < b.second;
            });
            
Declare the template with returntype (inputtype, inputtype) {
[] (inputtype & a, intputtype & b) {
}
}

###

top() -- first elem ...
emplace() / push() -- push an element into the pq ...

struct compare {
    bool operator()(const P& p, const P& q) {
        return (p.first < q.first) || (p.first == q.first && p.second > q.second);
    }
};

priority_queue <P, vector<P>, compare> pq; -- faster way to make comparision.
