62. Unique Paths
Medium

A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?


Above is a 7 x 3 grid. How many possible unique paths are there?

 

Example 1:

Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Right -> Down
2. Right -> Down -> Right
3. Down -> Right -> Right

Example 2:

Input: m = 7, n = 3
Output: 28

Constraints:

    1 <= m, n <= 100
    It's guaranteed that the answer will be less than or equal to 2 * 10 ^ 9.

Accepted
509,326
Submissions
939,291

// class Solution {
// public:
//     int uniquePaths(int m, int n) {
//         // dp problem. 
        
//         vector<vector<int>> dp (m , vector<int>(n,0));
        
//         for (int i = 0; i < m; i++) {
//             for (int j = 0; j < n; j++) {
//                 if (i == 0 || j == 0) {
//                     dp[i][j] = 1;
//                 } else {
//                     dp[i][j] = dp[i-1][j] + dp[i][j-1];
//                 }
//             }
//         }
//         return dp[m-1][n-1];
//     }
// };

// Easy reduction to 1-d array. 

class Solution {
    public:
    int uniquePaths (int m, int n) {
        vector<vector<int>> dp (2, vector<int>(n,1));
        
        int i = 1;
        while (i < m) {
            int curr = i % 2;
            for (int j = 1; j < n; j++) {
                if (curr == 1) 
                    dp[curr][j] = dp[curr][j-1] + dp[curr-1][j]; 
                else {
                    dp[curr][j] = dp[curr][j-1] + dp[curr+1][j];
                }
            }
            i++;
        }
        return dp[(m-1)%2][n-1];
    }
};
