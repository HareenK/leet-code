  Subarray Sum Equals K

Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:

Input:nums = [1,1,1], k = 2
Output: 2

Note:

    The length of the array is in range [1, 20,000].
    The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].




/* class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        
        // Compute the rolling sum. Keep the sum at a given index with the 
        // index in a hash. For a given sum at an index, find if we can get
        // a entry in the hash with 'k-sum' or 'k+sum'.
        
        unordered_map<int,int> map;
        
        map[0] = 1;
        int sum = 0;
        int count = 0;
        for (int i = 0; i < nums.size(); i++) {
            sum += nums[i];
            
            if (map.find(sum-k) != map.end()) {
                count += map[sum-k];  
            }
            
            if (map.find(sum) != map.end()) {
                map[sum]++;
            } else {
                map[sum] = 1;
            }   
        }
        return count;
    }
};
*/

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        std::unordered_map<int, int> seen = {{0, 1}};
        int count = 0, sum = 0;
        for (auto n: nums) {
            sum += n;
            count += seen[sum - k];
            seen[sum]++;
        }
        return count;
    }
};
