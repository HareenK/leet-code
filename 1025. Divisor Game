1025. Divisor Game

Alice and Bob take turns playing a game, with Alice starting first.

Initially, there is a number N on the chalkboard.  On each player's turn, that player makes a move consisting of:

    Choosing any x with 0 < x < N and N % x == 0.
    Replacing the number N on the chalkboard with N - x.

Also, if a player cannot make a move, they lose the game.

Return True if and only if Alice wins the game, assuming both players play optimally.

Example 1:

Input: 2
Output: true
Explanation: Alice chooses 1, and Bob has no more moves.

Example 2:

Input: 3
Output: false
Explanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.

class Solution {
public:
    bool divisorGame(int N) {
        // Build-up a DP solution .. to cache if x is choosen,
        // will alice win. 
        
        if (N < 2)
            return false;
        
        vector<int> dp (N+1, 0);
        
        dp[1] = 0;
        
        for (int n = 2; n <= N; n++) {
            for (int j = 1; j < n; j++) {
                // Go through all the previous,
                // possible values and check if there
                // exists a j such that N % j == 0 and dp[n-j] == 0;
                // set dp[n] = 1; 
                // else set dp[n] = 0;
                
                if ((n % j == 0) && (dp[n-j] == 0)) {
                    dp[n] = 1;
                    break;
                }
            }
        }
        
        
        return dp[N] > 0 ? true : false;
    }
};
