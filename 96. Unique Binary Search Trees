96. Unique Binary Search Trees
Medium

Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?

Example:

Input: 3
Output: 5
Explanation:
Given n = 3, there are a total of 5 unique BST's:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

https://leetcode.com/problems/unique-binary-search-trees/solution/ -- Read the intution. It was important to derive the recursive solution. 
How would the enumeration code work?? 

class Solution {
public:
    int numTrees(int n) {
      //  unique binary trees. 
      // can be formuated as a dp problem. 
      // given n = 1 .. there is one way to make the tree. 
      // keep two array -- number of possible tree postions and the number of 
        
      // n = 1 .. 1 (0L:1, 1L:0)
      // n = 2 .. 2 (2*1) (0:2, 1:1)
      // n = 3  ..5 (2*2 + 1*1) --> 5 (0:4, 1:2)
      //
      // Keep track of num nodes with 0 leafs, 1 leafs, 
     
      vector<int> dp (n+1, 0); 
        
      dp[0] = 1; dp[1] = 1;
        
      for (int i = 2; i <= n; i++) {
          for (int j = 1; j <=i; j++) {
              dp[i] += dp[j-1]*dp[i-j];
          }
      }
      
      return dp[n];
    }
};

