113. Path Sum II
Medium

Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1

Return:

[
   [5,4,11,2],
   [5,8,4,5]
]

 /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> result = {};
    int target = 0;

    void dfs (TreeNode * root, int sum, vector<int> & path) {
        if (root->left == NULL && root->right == NULL) {
            if (sum+root->val == target) {
                path.emplace_back(root->val);
                result.emplace_back(path);
                path.pop_back();
                return;
            }
        }
        path.emplace_back(root->val);
        if (root->left != NULL)
            dfs (root->left, sum + root->val, path);
        
        if (root->right != NULL)
            dfs (root->right, sum + root->val, path);
        
        path.pop_back();
        return;
    }
    
    
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        if (root == NULL) {
            return {};
        }
        target = sum;
        vector<int> path = {};
        dfs (root, 0, path);
        
        return result;
    }  
};
