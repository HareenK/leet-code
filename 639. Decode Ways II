639. Decode Ways II

 A message containing letters from A-Z is being encoded to numbers using the following mapping way:

'A' -> 1
'B' -> 2
...
'Z' -> 26

Beyond that, now the encoded string can also contain the character '*', which can be treated as one of the numbers from 1 to 9.

Given the encoded message containing digits and the character '*', return the total number of ways to decode it.

Also, since the answer may be very large, you should return the output mod 109 + 7.

Example 1:

Input: "*"
Output: 9
Explanation: The encoded message can be decoded to the string: "A", "B", "C", "D", "E", "F", "G", "H", "I".

Example 2:

Input: "1*"
Output: 9 + 9 = 18

Note:

    The length of the input string will fit in range [1, 105].
    The input string will only contain the character '*' and digits '0' - '9'.

#define MOD 1000000007
class Solution {
public:
    int numDecodings(string s) {
        int size = s.size();
        
        if (!size)
            return 0;
        
        vector<long> dp (size+1, 0);
        
        dp[0] = 1;
        
        if (s[0] != '0') {
            if (s[0] == '*') {
                dp[1] = 9;    
            } else {
                dp[1] = 1;
            }
        }
            
        for (int i = 2; i <= size; i++) {
            char curr = s[i-1];
            char last = s[i-2];
            
            if (curr == '*') {
                dp[i] = 9*dp[i-1]%MOD;
                if (last == '2') {
                    dp[i] = (dp[i] + 6*dp[i-2])%MOD;
                } else if (last == '1') {
                    dp[i] = (dp[i] + 9*dp[i-2])%MOD;
                } else if (last == '*') {
                    dp[i] = (dp[i] + 15*dp[i-2]%MOD);
                }
            } else {
                if (curr != '0')
                    dp[i] = dp[i-1];
                if (last == '1') {
                    dp[i] = (dp[i] + dp[i-2])%MOD;
                } else if (last == '2' && curr <= '6') {
                    dp[i] = (dp[i] + dp[i-2])%MOD;
                } else if (last == '*') {
                    if (curr <= '6') {
                        dp[i] = (dp[i] + 2*dp[i-2])%MOD;
                    } else {
                        dp[i] = (dp[i] + dp[i-2])%MOD;
                    } 
                }   
            }
        } 
        
        // for (auto & elem : dp) {
        //     cout << elem << " ";
        // }
        // cout << endl;
        
        return (int) dp[size];
    }
};
