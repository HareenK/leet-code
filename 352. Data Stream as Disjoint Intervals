https://leetcode.com/problems/data-stream-as-disjoint-intervals/

352. Data Stream as Disjoint Intervals
Hard

Given a data stream input of non-negative integers a1, a2, ..., an, ..., summarize the numbers seen so far as a list of disjoint intervals.

For example, suppose the integers from the data stream are 1, 3, 7, 2, 6, ..., then the summary will be:

[1, 1]
[1, 1], [3, 3]
[1, 1], [3, 3], [7, 7]
[1, 3], [7, 7]
[1, 3], [6, 7]

 

Follow up:

What if there are lots of merges and the number of disjoint intervals are small compared to the data stream's size?

class SummaryRanges {
public:
    /** Initialize your data structure here. */
    
    // Compaction -- given a number you can only merge atmost 2 items. 
    // So we find if num-1 or num+1 is present and run compaction on it. 
    
    vector<vector<int>> vecG; 
    
    SummaryRanges() {
        vecG = vector<vector<int>> ();
    }
    
    int binarysearch (int target) {
        int left = 0;
        int right = 2*vecG.size()-1;
        
        while (left <= right) {
            int mid = left + (right-left)/2;
            int val = vecG[mid/2][mid%2];
            if (target == val) {
                return mid%2 == 1 ? mid-1 : mid; // We return mid-1 or mid to notify the fact that the number falls in the range of vec[mid/2][mid] and vec[mid/2][mid+1]
            } else if (target > val) {
                left = mid+1;
            } else {
                right = mid-1;
            }
        }
        return right;
    }
    
    void addNum(int val) {
        int size = vecG.size();
        
        if (!size) {
            vecG.push_back ({val,val});
            return;
        }
        
        int idx = binarysearch (val);
        
        if (idx%2 == 0) 
            return;
        
        int pos = idx/2;
        
        if (idx == -1) {
            if (val+1 == vecG[0][0]) {
                vecG[0][0] = val;
            } else {
                vecG.insert(vecG.begin(), {val,val});
            }
        } else if (pos == size-1)  {
              if (val-1 == vecG[size-1][1]) {
                  vecG[size-1][1] = val;
              } else {
                  vecG.push_back ({val,val});
              }
        } else {
            // if the idx is not even .. then we can insert a new number from the 
            // data-stream. 
            // See if we can form compaction. 
            
            int leftVal = vecG[pos][1];
            int rightVal = vecG[pos+1][0];
            
            if (leftVal == val-1 && rightVal == val+1) {
                vecG[pos][1] = vecG[pos+1][1];
                vecG.erase(vecG.begin()+pos+1);
            } else if (leftVal == val-1) {
                vecG[pos][1] = val;
            } else if (rightVal == val+1) {
                vecG[pos+1][0] = val;
            } else {
                vecG.insert(vecG.begin()+pos+1, {val, val});
            }
        } 
    }
    
    vector<vector<int>> getIntervals() {
        return vecG;
    }
};

/**
 * Your SummaryRanges object will be instantiated and called as such:
 * SummaryRanges* obj = new SummaryRanges();
 * obj->addNum(val);
 * vector<vector<int>> param_2 = obj->getIntervals();
 */
