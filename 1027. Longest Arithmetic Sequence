
1027. Longest Arithmetic Sequence
Medium

Given an array A of integers, return the length of the longest arithmetic subsequence in A.

Recall that a subsequence of A is a list A[i_1], A[i_2], ..., A[i_k] with 0 <= i_1 < i_2 < ... < i_k <= A.length - 1, and that a sequence B is arithmetic if B[i+1] - B[i] are all the same value (for 0 <= i < B.length - 1).

 

Example 1:

Input: [3,6,9,12]
Output: 4
Explanation: 
The whole array is an arithmetic sequence with steps of length = 3.

Example 2:

Input: [9,4,7,2,10]
Output: 3
Explanation: 
The longest arithmetic subsequence is [4,7,10].

Example 3:

Input: [20,1,15,3,10,5,8]
Output: 4
Explanation: 
The longest arithmetic subsequence is [20,15,10,5].

Note:

    2 <= A.length <= 2000
    0 <= A[i] <= 10000

class Solution {
public:
    int longestArithSeqLength(vector<int>& nums) {
        // [3,6,9,12] -- 
        // using a dp solution. 
        // for (int num = 0; num < nums; nums++) {
        //      for (int i = )
        // }
        // keep a vector of unordered_map<>
        
        int size = nums.size();
        
        vector<unordered_map<int,int>> dp;
        
        dp.emplace_back(unordered_map<int,int> ({})); // Init this to a empty hash-map.
        //cout << dp[0].size() << endl;
        
        
        for (int i = 1; i < size; i++) {
            dp.emplace_back(unordered_map<int,int> ({}));
            for (int j = 0; j < i; j++) {
                int diff = nums[j]-nums[i];
                if (dp[j].find(diff) != dp[j].end()) {
                    dp[i][diff] = dp[j][diff] + 1;
                } else {
                    dp[i][diff] = 2; // If a lower number in the array doesn't have a sequence ending with the diff we are checking,
                                     // the longest sequence is 2. 
                }
            }
        }
        
        int maxG = 0;
        
        for (auto & map : dp) {
            for (auto & elem : map) {
                maxG = max(maxG, elem.second);
            }
        }
        
        return maxG;
        
    }
};

// The max computation can be done inline too. 
