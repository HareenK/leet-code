791. Custom Sort String
Medium

####
It is weird that it fails when make the following check.
unordered_map <char, int> mapG;

bool compare (char& a, char& b) {
    
    //cout << a  << " - " << mapG[a] << b << " - " << mapG[b] << endl;
    // cout << a  << " " << b << endl;

    // if (mapG.find(a) != mapG.end() && 
    //     mapG.find(b) != mapG.end()) { --> why does this fail ??? 
    //     return mapG[a] < mapG[b];
    // } else {
    //     return false;
    // }
     return mapG[a] < mapG[b];
}
####

S and T are strings composed of lowercase letters. In S, no letter occurs more than once.

S was sorted in some custom order previously. We want to permute the characters of T so that they match the order that S was sorted. More specifically, if x occurs before y in S, then x should occur before y in the returned string.

Return any permutation of T (as a string) that satisfies this property.

Example :
Input: 
S = "cba"
T = "abcd"
Output: "cbad"
Explanation: 
"a", "b", "c" appear in S, so the order of "a", "b", "c" should be "c", "b", and "a". 
Since "d" does not appear in S, it can be at any position in T. "dcba", "cdba", "cbda" are also valid outputs.

Note:

    S has length at most 26, and no character is repeated in S.
    T has length at most 200.
    S and T consist of lowercase letters only.

Accepted
63,865
Submissions
97,126

unordered_map <char, int> mapG;

bool compare (char& a, char& b) {
    // cout << " " << a << " " << b << endl;
    return mapG[a] < mapG[b];
}

class Solution {
public:
    string customSortString(string S, string T) {
        // generate and id for each character.
        // Sort the second string using the ids.
        
        for (int i = 0; i < S.size(); i++) {
            mapG[S[i]] = i;
        }
        
        sort (T.begin(), T.end(), compare);
        
        return T;
    }
};

// class Solution {
// public:
//     string customSortString(string S, string T) {
//         int pos[26]={0};
//         for(int i=0;i<S.size();i++){
//             pos[S[i]-'a']=i;
//         }
//         sort(T.begin(),T.end(),[pos](auto&a,auto&b){
//            return pos[a-'a']a<pos[b-'a']; 
//         });
//         return T;
//     }
// };
