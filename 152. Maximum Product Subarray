152. Maximum Product Subarray
Medium

Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.

Example 1:

Input: [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.

Example 2:

Input: [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.

Accepted
329,768
Submissions
1,049,602

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        // Easy dp problem ... keep a max product you can get at each index i.
        // Then use for-loop and then check the max product we can get. 
        // Think about this again ... 
        
        // regular solution can be obtained in O(n^2).
        
        // We need to keep a min and max both.
        
        // See it as a 0/1 Knap-sack problem. 
        
        // Worked for a case where both the numbers are positive and negative.
        
        int size = nums.size();
        
        vector<vector<int>> dp (size,vector<int>(2,0)); // Nx2 matrix with col 0 : min, col 1: max.
        
        dp[0][0] = nums[0];
        dp[0][1] = nums[0];
        int maxG = dp[0][1];
        for (int i = 1; i < size; i++) {
            int num1 = dp[i-1][0]*nums[i];
            int num2 = dp[i-1][1]*nums[i];
            dp[i][0] = min ({num1,num2,nums[i]});
            dp[i][1] = max ({num1,num2,nums[i]});
            maxG = max(maxG, dp[i][1]);
        }
        
        return maxG;
    }
};
