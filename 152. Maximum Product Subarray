// class Solution {
// public:
//     int maxProduct(vector<int>& nums) {
//         // Easy dp problem ... keep a max product you can get at each index i.
//         // Then use for-loop and then check the max product we can get. 
//         // Think about this again ... 
        
//         // regular solution can be obtained in O(n^2).
        
//         // We need to keep a min and max both.
        
//         // See it as a 0/1 Knap-sack problem. 
        
//         int size = nums.size();
        
//         vector<vector<int>> dp (size,vector<int>(2,0)); // Nx2 matrix with col 0 : min, col 1: max.
        
//         dp[0][0] = nums[0];
//         dp[0][1] = nums[0];
//         int maxG = dp[0][1];
//         for (int i = 1; i < size; i++) {
//             int num1 = dp[i-1][0]*nums[i];
//             int num2 = dp[i-1][1]*nums[i];
//             dp[i][0] = min ({num1,num2,nums[i]});
//             dp[i][1] = max ({num1,num2,nums[i]});
//             maxG = max(maxG, dp[i][1]);
//         }
        
//         return maxG;
//     }
// };

// The solution is slow because you too a Nx2 matrix vs 2xN matrix -- that actually didn't matter.

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        // Easy dp problem ... keep a max product you can get at each index i.
        // Then use for-loop and then check the max product we can get. 
        // Think about this again ... 
        
        // regular solution can be obtained in O(n^2).
        
        // We need to keep a min and max both.
        
        // See it as a 0/1 Knap-sack problem. 
        
        int size = nums.size();
        
        // vector<vector<int>> dp (2,vector<int>(size,0)); // Nx2 matrix with col 0 : min, col 1: max.
        
        int MIN = nums[0];
        int MAX = nums[0];
        int maxG = MAX;
        for (int i = 1; i < size; i++) {
            int num1 = MIN*nums[i];
            int num2 = MAX*nums[i];
            MIN = min ({num1,num2,nums[i]});
            MAX = max ({num1,num2,nums[i]});
            maxG = max(maxG, MAX);
        }
        
        return maxG;
    }
};
