39. Combination Sum
Medium

Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

    All numbers (including target) will be positive integers.
    The solution set must not contain duplicate combinations.

Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]

Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

// Wow missed writing a few backtracking solutions.
// Need to always be in the grove. 

class Solution {
public:
    int targetG;
    vector<vector<int>> result;
    vector<int> candidatesG;
    
    void dfs (vector<int> & path, int index, int sum) {
        
        if (sum == targetG) {
            result.push_back(path);
            return;
        }
        
        if (sum > targetG) 
            return;
        
        for (int i = index; i < candidatesG.size(); i++) {
            path.emplace_back(candidatesG[i]);
            dfs (path, i, sum + candidatesG[i]);
            path.pop_back();
        }
        
        return;
    }
    
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        // We have to use backtracking. 
        
        targetG = target;
        candidatesG = candidates; 
        
        vector<int> path;
        
        dfs (path, 0, 0);
        return result;
    }
};
