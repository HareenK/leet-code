494. Target Sum
Medium

You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols + and -. For each integer, you should choose one from + and - as its new symbol.

Find out how many ways to assign symbols to make sum of integers equal to target S.

Example 1:

Input: nums is [1, 1, 1, 1, 1], S is 3. 
Output: 5
Explanation: 

-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3

There are 5 ways to assign symbols to make the sum of nums be target 3.

 

Constraints:

    The length of the given array is positive and will not exceed 20.
    The sum of elements in the given array will not exceed 1000.
    Your output answer is guaranteed to be fitted in a 32-bit integer.

Accepted
160,614
Submissions
345,024

/*
void recurse (int sum, int index, int * count, int size, int target, vector<int> & nums) {
    // Can I work on any tree pruning?? 
    
    if (index == size) {
        if (sum == target) {
            *count++;
        }
    }
    recurse (sum + nums[index], ++index, count, size, target, nums);
    recurse (sum - nums[index], ++index, count, size, target, nums);
    
}

class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int S) {
        int count = 0;
        // check if the size is 0 what to return ?? 
        
        if (nums.size() == 0)
            return 0;

        recurse (0, 0, &count, nums.size(), S, nums);
        return count; 
    }
};
*/

/*
class Solution {
public:
    int findTargetSumWays(int[] nums, int S) {
int sum = 0;
for (int n: nums) sum += n;
if (sum < S || (sum - S) % 2 == 1) return 0;
int target = (sum - S) / 2;
int[] dp = new int[target + 1];
dp[0] = 1;
for (int i = 0; i < nums.length; i++) {
for (int j = target; j >= nums[i]; j--) {
dp[j] += dp[j - nums[i]];
}
}
return dp[target];
}
};
*/

/*
class Solution {
  public: 
    int findTargetSumWays (vector<int> nums, int T) {
        int S = accumulate(nums.begin(), nums.end(), 0);
        
        if (T > S)
            return 0;
        
        int target = (S - T)/2;
      
        // P + N = S
        // P - N = T
        // N = S-T/2;
      
        // Number of ways to choose numbers belonging to N such that
        // target sum is target.
     
        vector<vector<int>> dp (nums.size(), vector<int> (target+1, 0));
        
        int rows = dp.size();
        int cols = dp[0].size();
      
        cout << rows << " " << cols << endl;
        
        dp[0][0] = 1;
        
        // for (int r = 0; r < rows; r++) {
        //      dp[r][0] = 1;
        // }
      
//         for (int c = 1; c < cols; c++) {
//              dp[0][c] = (c - nums[0] == 0) ? 1 : 0;
//         }
        
        // if (rows == 1)
        //     return dp[rows-1][cols-1];
        
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                dp[r][c] = dp[r-1][c];
                if (c-nums[r] >= 0) {
                    dp[r][c] += dp[r-1][c-nums[r]];
                }
            }
        }
        
        for (auto & row : dp) {
            for (auto & elem : row) {
                cout << elem << " ";
            }
            cout << endl;
        }
        
        return dp[rows-1][cols-1];
  }  
};
*/
/*
class Solution {
public:
    int findTargetSumWays (vector<int> nums, int S) {
int sum = accumulate(begin(nums), end(nums), 0);
if(S > sum) return 0;
sum = (sum + S) / 2;

vector<vector<int>> dp(nums.size() + 1, vector<int>(sum + 1));
// 0 sum can be made always
for(int i = 0; i <= nums.size(); i++)
    dp[i][0] = 1;
for(int i = 1; i <= nums.size(); i++) {
    for(int j = 0; j <= sum; j++) {
        dp[i][j] = dp[i - 1][j];
        if(nums[i - 1] <= j)
            dp[i][j] += dp[i - 1][j - nums[i - 1]];
    }
}
return dp[nums.size()][sum];
}
};
*/

class Solution {
public:
  int findTargetSumWays(const vector<int> &num, int target) {
      
    int allSum = accumulate(num.begin(), num.end(), 0);
      
    if (allSum < target || (allSum+target)%2 != 0)
        return 0;
      
    int sum = (allSum+target)/2;
      
    int n = num.size();
    vector<vector<int>> dp(n, vector<int>(sum + 1, 0));
  
      
    // process all subsets for all sums
    for (int i = 0; i < num.size(); i++) {
      for (int s = 0; s <= sum; s++) {
          if ((i == 0) && (s == 0)) {
              dp[0][0] = 1;
              if (num[0] == 0) {
                  dp[0][0]++;
              }
              continue;
          }
          if (i == 0) {
              dp[i][s] = (num[0] == s ? 1 : 0);
              continue;
          }
        // exclude the number
        dp[i][s] = dp[i - 1][s];
        // include the number, if it does not exceed the sum
        if (s >= num[i]) {
          dp[i][s] += dp[i - 1][s - num[i]];
        }
      }
    }
      
    for (auto & row : dp) {
        for (auto & elem : row) {
            cout << elem << " ";
        }
        cout << endl;
    }  
    
    return dp[num.size() - 1][sum];
  }
};

/*
class Solution {
public:
    int findTargetSumWays(vector<int>& nums, int S) {
        int total = accumulate(nums.begin(), nums.end(), 0);
        // the sum of S and negative set should be even
        if(S > total || (S + total) % 2 != 0)
            return 0;
        
        int positive_set_sum = (S + total) / 2;
        
        // each entry i: num of ways in which sum i is possible using the given arrays elements 
        vector<int> dp(positive_set_sum + 1, 0);
        // sum zero is always possible
        dp[0] = 1;
        
        for(const int& num: nums) {
            // starting from back to avoid addition of redundant terms with the 
            // lower values when doing dp[i - num]
            for(int i = positive_set_sum; i >= num; i--) {
                dp[i] += dp[i - num];
            }
        }
        
        return dp[positive_set_sum];
    }
};
*/

Notes: Remember the solution to have dp[r][0] == 1 for all r .. is given a non-zero positive number, there is only one way to get 0 target sum. What changes here
is that the numbers can be 0 too. In that case we need to make sure that we account for 0 num. Keep that in mind. 
