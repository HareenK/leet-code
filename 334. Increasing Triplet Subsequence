334. Increasing Triplet Subsequence
Medium

Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.

Formally the function should:

    Return true if there exists i, j, k
    such that arr[i] < arr[j] < arr[k] given 0 ≤ i < j < k ≤ n-1 else return false.

Note: Your algorithm should run in O(n) time complexity and O(1) space complexity.

Example 1:

Input: [1,2,3,4,5]
Output: true

Example 2:

Input: [5,4,3,2,1]
Output: false

Extra memory solution is good - but how do we find the non extra memory solution. 

class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        // Keep a context of the current min as we process the array. 
        
        // Now if a num less than curr min is found 
        
        // [2,5,1,6] --> 
        
        // [2,5,1,4]
        
        // [4,5,1,2,3] --? 
        
        // Keep a min from the left and right, we can sweep the array from the back and 
        // then we can tell if a 3 length increasing sequence exists. 
        
        int size = nums.size();
        
        if (size < 3) {
            return false;
        }
        
        vector<int> left (size, 0);
        vector<int> right (size, 0);
        
        left[0] = nums[0];
        
        for (int i = 1; i < size; i++) {
            left[i] = min (left[i-1], nums[i]);
        }
        
        right[size-1] = nums[size-1];
        
        for (int j = size-2; j >= 0; j--) {
            right[j] = max (right[j+1], nums[j]);
        }
        
        for (int i = 0; i < size; i++) {
            if (left[i] < nums[i] &&
                nums[i] < right[i]) {
                return true;
            }
        }
        
        return false;
    }
};
