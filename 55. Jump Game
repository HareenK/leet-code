55. Jump Game
Medium

Given an array of non-negative integers, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Determine if you are able to reach the last index.

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.

Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.


// class Solution {
// public:
//     bool canJump(vector<int>& nums) {
//         // dp problem -- can I reach based on all the previous computations. 
//         vector<int> canReach(nums.size(), 0);
        
//         canReach[0] = 1;
        
//         for (int i = 1; i < nums.size(); i++) {
//             for (int j = i-1; j >= 0; j--) {
//                 // Currently at index i .. can you jump from index index j, 
//                 // given the max jump length in nums[j]? possible = 1, if 
//                 // can find atleast one jump location.
//                 if (i-j <= nums[j] && canReach[j]) {
//                     canReach[i] = 1;
//                     break;
//                 }
//             }
//         }
        
//         return canReach[nums.size()-1];   
//     }
// };

// class Solution {
//     public:
//     bool canJump(vector<int> & nums) {
//         int last = nums.size()-1;
//         for (int i = nums.size()-1; i >= 0; i--) {
//             if (i + nums[i] >= last) {
//                 last = i;
//             }
//         }
//         return last == 0;
//     }
// };

class Solution {
    public: 
    bool canJump (vector<int> & nums) {
        int last = 0;
        for (int i = 0; i < nums.size(); i++) {
            if (last >= i && (i + nums[i] >= last)) {
                last = i+nums[i];
            }
        }
        return (last >= nums.size()-1 ? true : false); 
    }
};
