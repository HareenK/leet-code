226. Invert Binary Tree
Easy

Invert a binary tree.

Example:

Input:

     4
   /   \
  2     7
 / \   / \
1   3 6   9

Output:

     4
   /   \
  7     2
 / \   / \
9   6 3   1

Trivia:
This problem was inspired by this original tweet by Max Howell:

    Google: 90% of our engineers use the software you wrote (Homebrew), but you canâ€™t invert a binary tree on a whiteboard so f*** off.

Accepted
497,936
Submissions
778,758

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        // Super simple algo -- 
        
        if (root == NULL) return NULL;
        
        queue<TreeNode *> q;
        q.push(root);
        while (!q.empty()) {
            auto elem = q.front();
            q.pop();
            TreeNode * temp = elem->left;
            elem->left = elem->right;
            elem->right = temp;
            if (elem->left != NULL) q.push(elem->left);
            if (elem->right != NULL) q.push(elem->right);
        }
        return root;
    }
};

class Solution {
    public: 
    TreeNode * invertTree (TreeNode * root) {
        if (root == NULL) {
            return NULL;
        }
        
        TreeNode * temp = root->left;
        
        root->left = root->right;
        root->right = temp;
        
        invertTree (root->left);
        invertTree (root->right);
        
        return root;
        
    }
};
