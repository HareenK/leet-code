64. Minimum Path Sum
Medium

Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

Example:

Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.

/*

[1 2 3] [0,1,2,3]
[4 5 6] [4,5,6,7]
[* * * *]

*/
/*
bool compare (pair<int,int> a, pair<int,int> b) {
    return a.first > b.first;
}

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        
        int row = grid.size();
        if (row == 0) return 0;
        int col = grid[0].size();
        
        priority_queue <pair<int,int>, 
                       vector<pair<int,int>>, 
                       function<bool(pair<int,int>, pair<int,int>)>> pq (compare);
        
        // pq --> first: sum, second: index. 
        
        pq.push(make_pair(grid[0][0], 0));
        
        while (pq.size() > 0) {
            auto current = pq.top(); pq.pop();
            
            auto sum = current.first;
            auto index = current.second;
            
            if (index == row*col-1) {
                return sum;
            }
            
            if (index % col != col-1) {
                int new_sum = sum + grid[(index+1)/col][(index+1)%col];
                int new_index = index+1;
                cout << "Pushed - Sum : " << new_sum << " index - " << new_index << endl;
                pq.push(make_pair(new_sum, new_index));
                 
            }
            
            if (index < (row-1)*col) {
                int new_sum = sum + grid[(index+col)/col][(index+col)%col];
                int new_index = index + col;
                cout << "Pushed - Sum : " << new_sum << " index - " << new_index << endl;
                pq.push(make_pair(new_sum, new_index));
            }
        }
        
        return -1;
    }
};
*/
class Solution {
    public:
    int minPathSum (vector<vector<int>>& grid) {
        int row = grid.size();
        if (row == 0) return 0;
        int col = grid[0].size();
        
        vector<vector<int>> dp (row, vector<int>(col, 0));
        
        dp[0][0] = grid[0][0];
        
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (j-1 >= 0 && i == 0) {
                    dp[i][j] = dp[i][j-1] + grid[i][j];
                } else if (i-1 >= 0 && j == 0) {
                    dp[i][j] = dp[i-1][j] + grid[i][j];
                } else if (i-1 >= 0 && j-1 >= 0){
                    dp[i][j] = grid[i][j] + min (dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        /*
        for (auto row : dp) {
            for (auto col : row) {
                cout << col << " ";
            }
            cout << endl;
        }
        */
        return dp[row-1][col-1]; 
    }
};
