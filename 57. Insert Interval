https://leetcode.com/problems/insert-interval

57. Insert Interval
Hard

Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:

Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]

Example 2:

Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].

NOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.

class Solution {
public:
    int binarySearch (vector<vector<int>> & intervals, int target) {
        int size = intervals.size();
        int left = 0;
        int right = 2*size-1;
        
        while (left <= right) {
            int mid = left + (right-left)/2;
            int val = intervals[mid/2][mid%2];
            if (val == target) {
                return mid%2 == 1 ? mid-1 : mid; 
                // Important step .. if there is match .. then consider if it is matching on 
                // an end or a start .. based on that send the index to include.
            } else if (target > val) {
                left = mid+1;
            } else {
                right = mid-1;
            }
        } 
        return right;
    }
    
    // start, end are indexes in intervals.
    
    void remove (vector<vector<int>> & intervals, int start, int end) {
            
            if (start <= end) {
                intervals.erase (intervals.begin()+start, intervals.begin()+end+1);
            }
            return;
    }

    vector<vector<int>> insert(vector<vector<int>>& intervals, 
                               vector<int>& newInterval) {
        
        int size = intervals.size();
        
        if (!size) {
            return {newInterval};
        }
        
        int start = binarySearch (intervals, newInterval[0]);
        int end = binarySearch (intervals, newInterval[1]);
        
        // cout << "start - " << start << " end - " << end << endl; 
        
        // Special cases to consider - 
        
        // if s = -1, e = -1; 
        // if s =  -1, e >= 0;
        
        if (start == -1 && end == -1) {
            intervals.insert(intervals.begin(), newInterval);
            return intervals;
        }
        
        if (start%2 == 0 && end%2 == 0) {
            int i = intervals[start/2][0];
            int j = intervals[end/2][1];
            remove (intervals, start/2, end/2);
            intervals.insert(intervals.begin()+start/2, {i,j});
        } else if (start%2 == 0 && abs(end%2) == 1) {
            int i = intervals[start/2][0];
            int j = newInterval[1];
            remove (intervals, start/2, end/2);
            intervals.insert(intervals.begin()+start/2,{i,j});
        } else if (abs(start%2) == 1 && end%2 == 0) {
            // This take care of the case where start is negative too. 
            int i = newInterval[0];
            int j = intervals[end/2][1];
            remove (intervals, (start+1)/2, end/2);
            intervals.insert(intervals.begin()+((start+1)/2), {i,j});
        } else if (abs(start%2) == 1 && abs(end%2) == 1) {
            remove (intervals, (start+1)/2, end/2);
            intervals.insert(intervals.begin()+((start+1)/2), newInterval);
        }
        
        return intervals;
    }
};
