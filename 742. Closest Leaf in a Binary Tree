742. Closest Leaf in a Binary Tree

Medium

Given a binary tree where every node has a unique value, and a target key k, find the value of the nearest leaf node to target k in the tree.

Here, nearest to a leaf means the least number of edges travelled on the binary tree to reach any leaf of the tree. Also, a node is called a leaf if it has no children.

In the following examples, the input tree is represented in flattened form row by row. The actual root tree given will be a TreeNode object.

Example 1:

Input:
root = [1, 3, 2], k = 1
Diagram of binary tree:
          1
         / \
        3   2

Output: 2 (or 3)

Explanation: Either 2 or 3 is the nearest leaf node to the target of 1.

Example 2:

Input:
root = [1], k = 1
Output: 1

Explanation: The nearest leaf node is the root node itself.

Example 3:

Input:
root = [1,2,3,4,null,null,null,5,null,6], k = 2
Diagram of binary tree:
             1
            / \
           2   3
          /
         4
        /
       5
      /
     6

Output: 3
Explanation: The leaf node with value 3 (and not the leaf node with value 6) is nearest to the node with value 2.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    unordered_map <TreeNode*, vector<TreeNode *>> graph; 
    TreeNode * target; 
    
    // Do a dfs and do a walk count from where we find a node. 
     
    void dfs (TreeNode * root, int k) {
        if (root != NULL) {
            
            if (root->val == k) {
                target = root;
            }
            
            vector<TreeNode *> nextList = {root->left, root->right}; 
            for (TreeNode * next : nextList) {
                if (next != NULL) {
                    if (graph.find(root) != graph.end()) {
                        graph[root].push_back(next);
                    } else {
                        graph[root] = {next};
                    }
                    if (graph.find(next) != graph.end()) {
                        graph[next].push_back(root);
                    } else {
                        graph[next] = {root};
                    }
                }
            }
            dfs (root->left, k);
            dfs (root->right, k);
        }
        
        return;
    }
    
    int findClosestLeaf(TreeNode* root, int k) {
        // convert the tree into a graph .. 
        
        dfs (root, k);
        // This can be reduced .. keep vals instead of the tree nodes. 
        unordered_set <TreeNode *> visited; 
        
        queue<TreeNode *> q; 
        
        if (!target) {
            return 0;
        }
        
        q.push(target);
        visited.insert(target);
        
        int level = 0;
        int distance = INT_MAX;
        
        int result = 0;
        
        while (!q.empty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                TreeNode * curr = q.front();
                q.pop();
                
                if (curr->left == NULL && curr->right == NULL) {
                    if (level < distance) {
                        distance = level;
                        result = curr->val;
                    }
                }
                
                for (auto & next : graph[curr]) {
                    if (visited.count(next) == 0) {
                        visited.insert(next);
                        q.push(next);
                    }
                }
            }
            level++;
        }
        
        return result;   
    }
};

// class Solution {
// public:
//     int findClosestLeaf(TreeNode* root, int k) {
//         // Build Graph
//         unordered_map<int, TreeNode*>m;
//         unordered_map<int, vector<int>>g;
//         buildGraph(g, m, root);
//         if(g[k].size() == 1 && !m[k]->left && !m[k]->right) return k; // The nearest leaf node is the root node itself
//         // BFS
//         vector<int>visited(1001);
//         deque<int>q;
//         q.push_back(k);
//         while(!q.empty()){
//             int node = q.front();
//             q.pop_front();
//             visited[node] = 1;
//             bool isEnd = true;
//             for(int neigh: g[node]){
//                 if(!visited[neigh]){
//                     q.push_back(neigh);
//                     isEnd = false;
//                 }
//             }
//             if(isEnd && !m[node]->left && !m[node]->right) return node;
//         }
//         return 0;
//     }
    
//     void buildGraph(unordered_map<int, vector<int>>& g, unordered_map<int, TreeNode*>& m, TreeNode* root){
//         if(!root) return;
//         m[root->val] = root;
//         if(root->left){
//             g[root->val].push_back(root->left->val);
//             g[root->left->val].push_back(root->val);
//             buildGraph(g, m, root->left);
//         }
//         if(root->right){
//             g[root->val].push_back(root->right->val);
//             g[root->right->val].push_back(root->val);
//             buildGraph(g, m, root->right);
//         }
//     }
// };
