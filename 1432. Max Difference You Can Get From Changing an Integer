1432. Max Difference You Can Get From Changing an Integer
Medium

You are given an integer num. You will apply the following steps exactly two times:

    Pick a digit x (0 <= x <= 9).
    Pick another digit y (0 <= y <= 9). The digit y can be equal to x.
    Replace all the occurrences of x in the decimal representation of num by y.
    The new integer cannot have any leading zeros, also the new integer cannot be 0.

Let a and b be the results of applying the operations to num the first and second times, respectively.

Return the max difference between a and b.

 

Example 1:

Input: num = 555
Output: 888
Explanation: The first time pick x = 5 and y = 9 and store the new integer in a.
The second time pick x = 5 and y = 1 and store the new integer in b.
We have now a = 999 and b = 111 and max difference = 888

Example 2:

Input: num = 9
Output: 8
Explanation: The first time pick x = 9 and y = 9 and store the new integer in a.
The second time pick x = 9 and y = 1 and store the new integer in b.
We have now a = 9 and b = 1 and max difference = 8

Example 3:

Input: num = 123456
Output: 820000

Example 4:

Input: num = 10000
Output: 80000

Example 5:

Input: num = 9288
Output: 8700

 

Constraints:

    1 <= num <= 10^8

Accepted
4,827
Submissions
11,621

class Solution {
public:
    int maxDiff(int num) {
        // Max difference by picking the last digit and the second last non-zero digit and making it zero.
        
        // Traverse - find first non highest 9 digit. 
        
        vector<int> result; // Keep digits in the reverse. 
        while (num > 0) {
            result.emplace_back(num%10);
            num = num/10;
        }
        
        // for (auto num : result) {
        //     cout << num << " ";
        // }
        
       int maxD = -1;
       int minD = -1;
       int replaceD = 1;
       int foundMin = 0;
       int foundMax = 0;
        
        for (int i = result.size()-1; i >= 0 ; i--) {
            
            if (result[i] < 9 && !foundMax) {
                maxD = result[i];
                foundMax = 1;
            }
            
            if (result[i] > 1 && !foundMin) {
                minD = result[i]; 
                foundMin = 1;
                if (i != result.size()-1) replaceD = 0;
            }
            
        }
        
        // cout << "Min D : " << minD << " Max D : " << maxD << endl;
        
        int tens = 1;
        
        int result1 = 0;
        
        for (auto num : result) {
            int maxL = num;
            int minL = num;
            
            if (num == maxD) {
                maxL = 9;
            }
            
            if (num == minD) {
                minL = replaceD == 0 ? 0 : 1;
            }
            
            result1 += tens*(maxL-minL);
            tens *= 10;
        }
        
        return result1;
    }
};
