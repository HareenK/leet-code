Given an array of integers with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.

Note:
The array size can be very large. Solution that uses too much extra space will not pass the judge.

Example:

int[] nums = new int[] {1,2,3,3,3};
Solution solution = new Solution(nums);

// pick(3) should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.
solution.pick(3);

// pick(1) should return 0. Since in the array only nums[0] is equal to 1.
solution.pick(1);

class Solution {
public:
    unordered_map <int, vector<int>> map;
    Solution(vector<int>& nums) {
        //  [1 2 3 3 3]
        //           ^       
        // If the number is present only once, 
        // we want to return only that index. 
        // If a number is present twice .. we have to
        // return between the two indexes where it is present. 
        
        // [1,2,3,3,3] -- 
        // 
        srand(time(NULL));
        
        for (int i = 0; i < nums.size(); i++) {
            if (map.find(nums[i]) != map.end()) {
                map[nums[i]].emplace_back(i);
            } else {
                map[nums[i]] = {i};
            }
        } 
    }
    
    int pick(int target) {
        return map[target][rand() % map[target].size()]; 
    }
};

/**
 * Your Solution object will be instantiated and called as such:
 * Solution* obj = new Solution(nums);
 * int param_1 = obj->pick(target);
 */
