865. Smallest Subtree with all the Deepest Nodes
Medium

Given a binary tree rooted at root, the depth of each node is the shortest distance to the root.

A node is deepest if it has the largest depth possible among any node in the entire tree.

The subtree of a node is that node, plus the set of all descendants of that node.

Return the node with the largest depth such that it contains all the deepest nodes in its subtree.

 

Example 1:

Input: [3,5,1,6,2,0,8,null,null,7,4]
Output: [2,7,4]
Explanation:



We return the node with value 2, colored in yellow in the diagram.
The nodes colored in blue are the deepest nodes of the tree.
The input "[3, 5, 1, 6, 2, 0, 8, null, null, 7, 4]" is a serialization of the given tree.
The output "[2, 7, 4]" is a serialization of the subtree rooted at the node with value 2.
Both the input and output have TreeNode type.


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode * result;
    int max_depth;
    
    int dfs (TreeNode * node, int depth) {
        if (node == NULL)
            return 0;
        
        if (node->left == NULL && node->right == NULL) {
            if (depth > max_depth) {
                result = node;
                max_depth = depth;
            }           
            return depth;
        }
        
        int left_depth = node->left != NULL ? dfs (node->left, depth+1) : 0;
        int right_depth = node->right != NULL ? dfs (node->right, depth+1) : 0;
        
        if (left_depth == right_depth &&
            left_depth == max_depth) {
            result = node;
        }
        
        return max (left_depth, right_depth);
    }
    
    TreeNode* subtreeWithAllDeepest(TreeNode* root) {
        // [3,5,1,6,2,0,8,null,null,7,4]
        
        // So we need to do recursion and keep a context of the current depth,
        // and then pass back the max depth possible at each node. 
        
        // Keep a global context of the result node and when you find a node which returns 
        // the left and right depth same as the max depth we can update the result node. 
        
        result = NULL;
        
        max_depth = INT_MIN; 
        
        (void) dfs (root, 0);
        
        return result;
    }
};
