497. Random Point in Non-overlapping Rectangles
Medium

Given a list of non-overlapping axis-aligned rectangles rects, write a function pick which randomly and uniformily picks an integer point in the space covered by the rectangles.

Note:

    An integer point is a point that has integer coordinates. 
    A point on the perimeter of a rectangle is included in the space covered by the rectangles. 
    ith rectangle = rects[i] = [x1,y1,x2,y2], where [x1, y1] are the integer coordinates of the bottom-left corner, and [x2, y2] are the integer coordinates of the top-right corner.
    length and width of each rectangle does not exceed 2000.
    1 <= rects.length <= 100
    pick return a point as an array of integer coordinates [p_x, p_y]
    pick is called at most 10000 times.

Example 1:

Input: 
["Solution","pick","pick","pick"]
[[[[1,1,5,5]]],[],[],[]]
Output: 
[null,[4,1],[4,1],[3,3]]

Example 2:

Input: 
["Solution","pick","pick","pick","pick","pick"]
[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]
Output: 
[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]

Explanation of Input Syntax:

The input is two lists: the subroutines called and their arguments. Solution's constructor has one argument, the array of rectangles rects. pick has no arguments. Arguments are always wrapped with a list, even if there aren't any.

class Solution {
public:
    vector<int> points; 
    vector<vector<int>> rectsG;
    
    int numPoints (vector<int> & rect) {
        return (1+abs(rect[0] - rect[2])) * (1+abs (rect[1]-rect[3]));
    }
    
    Solution(vector<vector<int>>& rects) {
        int sum = 0; 
        
        rectsG = rects;
        
        for (auto & rect : rects) {
            sum += numPoints(rect);
            points.emplace_back(sum);
        }
        
        srand(time(NULL));
    }
    
    // [3,7]
    
    vector<int> pick() {
        int index = rand()%points.back()+1;
        int pos = lower_bound (points.begin(), points.end(), index) - points.begin();
    
        vector<int> & rect = rectsG[pos];
        
        int point = (pos != 0) ? index-points[pos-1]-1 : index-1;
        
        int cols = abs(rect[0]-rect[2]) + 1;
        
        return {rect[0]+(point%cols), rect[3]-(point/cols)};
    }
};

/**
 * Your Solution object will be instantiated and called as such:
 * Solution* obj = new Solution(rects);
 * vector<int> param_1 = obj->pick();
 */
