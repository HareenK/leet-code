689. Maximum Sum of 3 Non-Overlapping Subarrays

In a given array nums of positive integers, find three non-overlapping subarrays with maximum sum.

Each subarray will be of size k, and we want to maximize the sum of all 3*k entries.

Return the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.

Example:

Input: [1,2,1,2,6,7,5,1], 2
Output: [0, 3, 5]
Explanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].
We could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.

 

Note:

    nums.length will be between 1 and 20000.
    nums[i] will be between 1 and 65535.
    k will be between 1 and floor(nums.length / 3).
    
// class Solution {
// public:
//     vector<int> maxSumOfThreeSubarrays(vector<int>& nums, int k) {
        
//         // So the logic is we have to consider a number to form the
//         // end of the 3*K terms ..
//         // 
//         //    1     2   3  
//         // [1,2,1,2,6,7,5,1], 2
//         // 
//         // 3*k ... 
//         // 
//         // Compute the two tuple max at each position k. 
//         // Compute the one tuple max at each position k. 
        
//         // We can get a solution in O(n^2) time and O(n) space. 
        
//         // O(n) space to store the 2-tuple max at each index and then compute the max sum. 
        
//         // [1, 2, 1, 2, 6, 7, 5, 1]
//         //     3  3  3  8 13 12  6  K=2
//         //        4  5  9 15 18 13  K=3
//         //     (3, 3, 13)
//         // 
//         // Sum up all the K tuples. And skip K-1 steps to get non-overlapping sub-arrays. 
        
//         // We need a couple of things. 
//         // One prefixSum. 
        
//         int size = nums.size();
        
//         vector<int> prefixSum(size, -1);
//         vector<pair<int, int>> twoSumMax(size, {-1,-1});       
        
//         int pSum = 0;
//         for (int i = 0; i < k; i++) {
//             pSum += nums[i];
//         }
        
//         prefixSum[k-1] = pSum;
            
//         for (int i = k; i < size; i++) {
//             prefixSum[i] = prefixSum[i-1] + nums[i] - nums[i-k];
//         }
        
//         for (int i = 2*k-1; i < size; i++) {
//             int maxL = INT_MIN;
//             int first = prefixSum[i];
//             for (int j = k-1; j <= i-k; j++) {
//                 int second = prefixSum[j];
//                 if (first + second > maxL) {
//                     maxL = first+second;
//                     twoSumMax[i].first = j;
//                     twoSumMax[i].second = maxL;
//                 }
//             }
//         }
        
//         vector<int> result = {-1,-1,-1};
        
//         int resultSum = INT_MIN;
        
//         for (int i = 3*k-1; i < size; i++) {
//             int first = prefixSum[i];
//             // This loop computes the 3*K sum max.
//             for (int j = 2*k-1; j <= i-k; j++) {
//                 int second = twoSumMax[j].second;
//                 if (first + second > resultSum) {
//                     resultSum = first+second;
//                     result = {twoSumMax[j].first-k+1, j-k+1, i-k+1};
//                 }
//             }
//         }
        
//         return result; 
//     }
// };

class Solution {
    public: 
    vector<int> maxSumOfThreeSubarrays (vector<int>& nums, int k) {
        int size = nums.size();
        
        vector<int> prefixSum(size-k+1, 0);
        // vector<pair<int, int>> twoSumMax(size, {-1,-1});       
        
        int pSum = 0;
        for (int i = 0; i < k; i++) {
            pSum += nums[i];
        }
        
        prefixSum[0] = pSum;
            
        for (int i = k; i < size; i++) {
            prefixSum[i-k+1] = prefixSum[i-k] + nums[i] - nums[i-k];
        }
        
        int pSize = prefixSum.size();
        
        vector<int> left (pSize, 0); 
        int best = 0;
        
        for (int i = 0; i < pSize; i++) {
            if (prefixSum[i] > prefixSum[best]) {
                best = i;
            }
            left[i] = best;
        }
        
        vector<int> right (pSize, 0); 
        
        best = pSize-1;
        for (int i = pSize-1; i >= 0; i--) {
            if (prefixSum[i] >= prefixSum[best]) {
                best = i;
            }
            right[i] = best;
        }
        
        vector<int> res = {-1,-1,-1};
        
        for (int j = k; j < pSize-k; j++) {
            int l = left[j-k]; int r = right[j+k]; 
            if (res[0] == -1 ||
                (prefixSum[j] + prefixSum[l] + prefixSum[r] > 
                prefixSum[res[0]] + prefixSum[res[1]] + prefixSum[res[2]])) {
                res[0] = l;
                res[1] = j;
                res[2] = r;
            }
        }
        
        return res;
    }
};
