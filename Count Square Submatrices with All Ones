1277. Count Square Submatrices with All Ones
Medium

Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.

 

Example 1:

Input: matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
Output: 15
Explanation: 
There are 10 squares of side 1.
There are 4 squares of side 2.
There is  1 square of side 3.
Total number of squares = 10 + 4 + 1 = 15.

Example 2:

Input: matrix = 
[
  [1,0,1],
  [1,1,0],
  [1,1,0]
]
Output: 7
Explanation: 
There are 6 squares of side 1.  
There is 1 square of side 2. 
Total number of squares = 6 + 1 = 7.

 

Constraints:

    1 <= arr.length <= 300
    1 <= arr[0].length <= 300
    0 <= arr[i][j] <= 1

Accepted
57,950
Submissions
79,338

class Solution {
public:
    int countSquares(vector<vector<int>>& matrix) {
     
        int row = matrix.size();
        
        if (row == 0) return 0;
        
        int col = matrix[0].size();
        
        int count = 0;
        
        vector<vector<int>> dp (row,vector<int> (col,0));
        
        for (int r = 0; r < row; r++) {
            dp[r][0] = matrix[r][0];
            count += dp[r][0];
        }
        //cout << "count1 - " << count << endl;
        for (int c = 1; c < col; c++) {
            dp[0][c] = matrix[0][c];
            count += dp[0][c];
        }
        //cout << "count2 - " << count << endl;
        
        for (int r = 1; r < row; r++) {
            for (int c = 1; c < col; c++) {
                if (matrix[r][c]) {
                    if (dp[r-1][c-1] && dp[r][c-1] && dp[r-1][c]) {
                        int minL = min ({dp[r-1][c-1], dp[r][c-1], dp[r-1][c]});
                        dp[r][c] = minL+1;
                    } else {
                        dp[r][c] = 1;
                    }
                }
                count += dp[r][c];
            }
        }
        
        //cout << "count3 - " << count << endl;
        
        //cout << "Input - " << endl; 
        
//         for (int i = 0; i < row; i++) {
//             for (int j = 0; j < col; j++) {
//                 cout << matrix[i][j];
//             }
//             cout << endl;
//         }
        
//         cout << "DP - " << endl;
        
//         for (int i = 0; i < row; i++) {
//             for (int j = 0; j < col; j++) {
//                 cout << dp[i][j];
//             }
//             cout << endl;
//         }
 
        
        return count;
    }
};
