114. Flatten Binary Tree to Linked List
Medium

Given a binary tree, flatten it to a linked list in-place.

For example, given the following tree:

    1
   / \
  2   5
 / \   \
3   4   6

The flattened tree should look like:

1
 \
  2
   \
    3
     \
      4
       \
        5
         \
          6

Accepted
337,950
Submissions
698,645

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

TreeNode * recurse (TreeNode * root) {
    if (root->left == NULL && root->right == NULL) {
        return root;
    }
    
    TreeNode * right = root->right;
    
    TreeNode * tail = NULL;
    
    if (root->left != NULL) {
        root->right = root->left;
        root->left = NULL;
        tail = recurse (root->right);
    } else {
        tail = root;
    }
    
    tail->right = right;
    
    if (right != NULL) 
         tail = recurse (right);
    
    return tail;
}

class Solution {
public:
    void flatten(TreeNode* root) {
        // Does flattening mean ... linked-list as a pre-order-traversal .. 
        // But you cann't make a duplicate copy. 
        if (root == NULL) 
            return;
        (void) recurse (root);
    }
};
