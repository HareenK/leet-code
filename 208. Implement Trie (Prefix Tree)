208. Implement Trie (Prefix Tree)
Medium

Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true

Note:

    You may assume that all inputs are consist of lowercase letters a-z.
    All inputs are guaranteed to be non-empty strings.

Accepted
341,258
Submissions


class Trie {
private:
    typedef struct TrieNode {
        unordered_map <char, TrieNode*> map;
        bool isLast;
    
        TrieNode () : isLast(false) {
        }
    
    }TrieNode;

    TrieNode * root;
public:
    /** Initialize your data structure here. */
    Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    
    void insert(string word) {
        // empty strings ... ?? 
        TrieNode * node = root;
        for (auto & c : word) {
            if (node->map.find(c) == node->map.end()) {
                node->map[c] = new TrieNode ();
            }
            node = node->map[c];
        }
        node->isLast = true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        TrieNode * node = root; 
        for (auto & c : word) {
            if (node->map.find(c) != node->map.end()) {
                node = node->map[c];
            } else {
                return false;
            }
        }
        
        return node->isLast;
        
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        TrieNode * node = root; 
        for (auto & c : prefix) {
            if (node->map.find(c) != node->map.end()) {
                node = node->map[c];
            } else {
                return false;
            }
        }
        
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
