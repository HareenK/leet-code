https://leetcode.com/problems/max-consecutive-ones-ii/

487. Max Consecutive Ones II
Medium

Given a binary array, find the maximum number of consecutive 1s in this array if you can flip at most one 0.

Example 1:

Input: [1,0,1,1,0]
Output: 4
Explanation: Flip the first zero will get the the maximum number of consecutive 1s.
    After flipping, the maximum number of consecutive 1s is 4.

Note:

    The input array will only contain 0 and 1.
    The length of input array is a positive integer and will not exceed 10,000

Follow up:
What if the input numbers come in one by one as an infinite stream? In other words, you can't store all numbers coming from the stream as it's too large to hold in memory. Could you solve it efficiently? 

// class Solution {
// public:
//     int findMaxConsecutiveOnes(vector<int>& nums) {
//         // Can use the left and right logic to get the number of ones on the
//         // left and right and then check for each flippable bit how many left  
//         // right indexes have 1. 
        
//         int size = nums.size();
        
//         vector<int> left(size,0); 
//         vector<int> right(size,0);
        
        
        
//         int count = 0;
        
//         for (int i = 0; i< nums.size(); i++) {
//             if (nums[i] == 0) {
//                 count = 0;
//             } else {
//                 count++;
//             }
//             left[i] = count;
//         }
        
//         count = 0;
        
//         for (int i = nums.size()-1; i >= 0; i--) {
//             if (nums[i] == 0) {
//                 count = 0;
//             } else {
//                 count++;
//             }
//             right[i] = count;
//         }
        
// //         for (auto & elem : left) {
// //             cout << elem << " ";
// //         }
        
// //         cout << endl;
        
// //         for (auto & elem : right) {
// //             cout << elem << " ";
// //         }
        
// //         cout << endl;
        
//         // do another loop and check if the left and right max ones can be found. 
        
//         // if all the bit are 1 ..just return nums.size();
        
//         if (left[size-1] == size) {
//             return size;
//         }
        
//         int result = 0;
        
//         for (int i = 0; i < nums.size(); i++) {
//             if (nums[i] == 0) {
//                 int leftMax = i > 0 ? left[i-1] : 0;
//                 int rightMax = i < nums.size()-1 ? right[i+1] : 0;
//                 result = max (result, leftMax+rightMax+1);
//             }
//         }
        
//         return result;
//     }
// };

class Solution {
public:
	int findMaxConsecutiveOnes(vector<int>& nums) {
		int ans=0;
		int isflip=0;
		int noflip=0;
		for (int i=0;i<nums.size();i++) {
			if(nums[i]==0){
				ans=max(ans,isflip);
				isflip=noflip+1;
				noflip=0;  
			}
			else{
				isflip++;
				noflip++;
			}
		}
		ans=max(noflip,max(ans,isflip));
		return ans;
	}
};

// Interesting logic. Two pointer logic. 



